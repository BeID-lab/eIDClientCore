/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

enum enum_testcase { testcase__NULL = -1, testcase_arg_No_SAML = 0, testcase_arg_SAML_1, testcase_arg_SAML_2, testcase_arg_Selbstauskunft_Wuerzburg, testcase_arg_AutentApp };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * service_provider_arg;	/**< @brief Service Provider URL.  */
  char * service_provider_orig;	/**< @brief Service Provider URL original value given at command line.  */
  const char *service_provider_help; /**< @brief Service Provider URL help description.  */
  enum enum_testcase testcase_arg;	/**< @brief SAML/Testcase selection. This option is mandatory..  */
  char * testcase_orig;	/**< @brief SAML/Testcase selection. This option is mandatory. original value given at command line.  */
  const char *testcase_help; /**< @brief SAML/Testcase selection. This option is mandatory. help description.  */
  char * card_reader_arg;	/**< @brief Part of Card Reader Name. If the Card Reader Name contains spaces, embrace it with quotes, i.e. \"Card Reader Name\".  */
  char * card_reader_orig;	/**< @brief Part of Card Reader Name. If the Card Reader Name contains spaces, embrace it with quotes, i.e. \"Card Reader Name\" original value given at command line.  */
  const char *card_reader_help; /**< @brief Part of Card Reader Name. If the Card Reader Name contains spaces, embrace it with quotes, i.e. \"Card Reader Name\" help description.  */
  char * pin_arg;	/**< @brief PIN.  */
  char * pin_orig;	/**< @brief PIN original value given at command line.  */
  const char *pin_help; /**< @brief PIN help description.  */
  int loopcount_arg;	/**< @brief Loopcount.  */
  char * loopcount_orig;	/**< @brief Loopcount original value given at command line.  */
  const char *loopcount_help; /**< @brief Loopcount help description.  */
  int cancel_after_paos_flag;	/**< @brief Cancel after PAOS connection establishment. (default=off).  */
  const char *cancel_after_paos_help; /**< @brief Cancel after PAOS connection establishment. help description.  */
  int debug_level_arg;	/**< @brief Debug level (verbosity) as a number. Debug levels are:
  \tAPDU :\t\t1
  \tCRYPTO :\t2
  \tSSL :\t\t4
  \tPAOS :\t\t8
  \tCARD :\t\t16
  \tCLIENT :\t32
  To choose multiple Debug Levels at the same time, just sum the corresponding numbers and take the result as parameter. (default='0').  */
  char * debug_level_orig;	/**< @brief Debug level (verbosity) as a number. Debug levels are:
  \tAPDU :\t\t1
  \tCRYPTO :\t2
  \tSSL :\t\t4
  \tPAOS :\t\t8
  \tCARD :\t\t16
  \tCLIENT :\t32
  To choose multiple Debug Levels at the same time, just sum the corresponding numbers and take the result as parameter. original value given at command line.  */
  const char *debug_level_help; /**< @brief Debug level (verbosity) as a number. Debug levels are:
  \tAPDU :\t\t1
  \tCRYPTO :\t2
  \tSSL :\t\t4
  \tPAOS :\t\t8
  \tCARD :\t\t16
  \tCLIENT :\t32
  To choose multiple Debug Levels at the same time, just sum the corresponding numbers and take the result as parameter. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int service_provider_given ;	/**< @brief Whether service-provider was given.  */
  unsigned int testcase_given ;	/**< @brief Whether testcase was given.  */
  unsigned int card_reader_given ;	/**< @brief Whether card-reader was given.  */
  unsigned int pin_given ;	/**< @brief Whether pin was given.  */
  unsigned int loopcount_given ;	/**< @brief Whether loopcount was given.  */
  unsigned int cancel_after_paos_given ;	/**< @brief Whether cancel-after-paos was given.  */
  unsigned int debug_level_given ;	/**< @brief Whether debug-level was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_testcase_values[];  /**< @brief Possible values for testcase. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
