From 8507f67d8823078120053f580e05abbc179cd372 Mon Sep 17 00:00:00 2001
From: Michael Gehring <mg@ebfe.org>
Date: Wed, 26 Jun 2013 20:49:14 +0200
Subject: [PATCH 1/3] add Christian J. Dietrichs RSA-PSK patch

http://www.internet-sicherheit.de/service/tools/patches/
http://blog.cj2s.de/archives/21-TLS-RSA-PSK-Cipher-Suites-for-OpenSSL.html

Patch adjusted by Erik Nellessen: erik.nellessen@informatik.hu-berlin.de
---
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_clnt.c OpenSSL_1_0_2-stable-patched/ssl/s3_clnt.c
--- OpenSSL_1_0_2-stable/ssl/s3_clnt.c	2014-08-19 11:23:31.557950757 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/s3_clnt.c	2014-08-19 11:04:45.000000000 +0200
@@ -335,7 +335,7 @@ int ssl3_connect(SSL *s)
 				}
 #endif
 			/* Check if it is anon DH/ECDH, SRP auth */
-			/* or PSK */
+			/* or plain PSK */
 			if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP)) &&
 			    !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
 				{
@@ -1409,10 +1409,10 @@ int ssl3_get_key_exchange(SSL *s)
 	if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)
 		{
 #ifndef OPENSSL_NO_PSK
-		/* In plain PSK ciphersuite, ServerKeyExchange can be
+		/* In PSK ciphersuites, ServerKeyExchange can be
 		   omitted if no identity hint is sent. Set
-		   session->sess_cert anyway to avoid problems
-		   later.*/
+		   session->sess_cert for plain PSK anyway to avoid 
+		   problems later.*/
 		if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)
 			{
 			s->session->sess_cert=ssl_sess_cert_new();
@@ -1461,7 +1461,8 @@ int ssl3_get_key_exchange(SSL *s)
 	EVP_MD_CTX_init(&md_ctx);
 
 #ifndef OPENSSL_NO_PSK
-	if (alg_k & SSL_kPSK)
+    /* handle PSK identity hint */
+	if (alg_k & (SSL_kPSK|SSL_kRSAPSK)) // CJD
 		{
 		char tmp_id_hint[PSK_MAX_IDENTITY_LEN+1];
 
@@ -1592,7 +1593,7 @@ int ssl3_get_key_exchange(SSL *s)
 	else
 #endif /* !OPENSSL_NO_SRP */
 #ifndef OPENSSL_NO_RSA
-	if (alg_k & SSL_kRSA)
+	if (alg_k & (SSL_kRSA|SSL_kRSAPSK)) // CJD
 		{
 		if ((rsa=RSA_new()) == NULL)
 			{
@@ -1631,7 +1632,7 @@ int ssl3_get_key_exchange(SSL *s)
 		n-=param_len;
 
 		/* this should be because we are using an export cipher */
-		if (alg_a & SSL_aRSA)
+		if (alg_a & SSL_aRSA) // FIXME CJD: is this needed for kRSAPSK, too?
 			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
 		else
 			{
@@ -1939,8 +1940,9 @@ fprintf(stderr, "USING TLSv1.2 HASH %s\n
 		}
 	else
 		{
-		/* aNULL, aSRP or kPSK do not need public keys */
-		if (!(alg_a & (SSL_aNULL|SSL_aSRP)) && !(alg_k & SSL_kPSK))
+		if (!(alg_a & (SSL_aNULL|SSL_aSRP)) && !(alg_k & (SSL_kPSK|SSL_kRSAPSK)))
+			/* aNULL, aSRP or kPSK do not need public keys
+			* CJD: added SSL_kRSAPSK here, too */
 			{
 			/* Might be wrong key type, check it */
 			if (ssl3_check_cert_and_algorithm(s))
@@ -2386,7 +2388,10 @@ int ssl3_send_client_key_exchange(SSL *s
 		/* Fool emacs indentation */
 		if (0) {}
 #ifndef OPENSSL_NO_RSA
-		else if (alg_k & SSL_kRSA)
+		/** here we can see normal RSA key exchange **/
+		/* ClientKeyExchange consists of the encrypted premaster secret 
+		* which in turn consists of version (2 bytes) and 46 random bytes */
+		else if (alg_k & SSL_kRSA) // plain kRSA case
 			{
 			RSA *rsa;
 			unsigned char tmp_buf[SSL_MAX_MASTER_KEY_LENGTH];
@@ -2413,23 +2418,37 @@ int ssl3_send_client_key_exchange(SSL *s
 				rsa=pkey->pkey.rsa;
 				EVP_PKEY_free(pkey);
 				}
-				
+			
+            /* build the pre master secret in tmp_buf:
+             * [client_version|2b] [len_rand|2b] [rand|46b] =: pms
+             * encrypted_pms = RSA_public_encrypt(pms)
+             * [len_epms|2b] [encrypted_pms]   */
+            /* two bytes version */
 			tmp_buf[0]=s->client_version>>8;
 			tmp_buf[1]=s->client_version&0xff;
+            /* 46 random bytes */
 			if (RAND_bytes(&(tmp_buf[2]),sizeof tmp_buf-2) <= 0)
 					goto err;
 
+            /* assume premaster secret and master secret have same length */
 			s->session->master_key_length=sizeof tmp_buf;
 
+            /* q now points to the send buffer (where p was pointing) */
 			q=p;
-			/* Fix buf for TLS and beyond */
+			/* Fix buf for TLS and beyond. Before writing to p, skip 2 bytes
+             * which are supposed to specify the length of the encrypted pms.
+             * This is only needed for certain versions >= TLS 1.0 */
 			if (s->version > SSL3_VERSION)
 				p+=2;
-			n=RSA_public_encrypt(sizeof tmp_buf,
-				tmp_buf,p,rsa,RSA_PKCS1_PADDING);
+            /*
+             *   int RSA_public_encrypt(int flen, unsigned char *from,
+             *       unsigned char *to, RSA *rsa, int padding);
+             * encrypt from tmp_buf into p using the key in rsa */
+			n=RSA_public_encrypt(sizeof tmp_buf, tmp_buf,
+                p, rsa, RSA_PKCS1_PADDING);
 #ifdef PKCS1_CHECK
-			if (s->options & SSL_OP_PKCS1_CHECK_1) p[1]++;
-			if (s->options & SSL_OP_PKCS1_CHECK_2) tmp_buf[0]=0x70;
+			if (s->options & SSL_OP_PKCS1_CHECK_1) p[1]++;          // ???
+			if (s->options & SSL_OP_PKCS1_CHECK_2) tmp_buf[0]=0x70; // ???
 #endif
 			if (n <= 0)
 				{
@@ -3005,10 +3024,20 @@ int ssl3_send_client_key_exchange(SSL *s
 			}
 #endif
 #ifndef OPENSSL_NO_PSK
+        /** plain PSK case **/
 		else if (alg_k & SSL_kPSK)
 			{
 			char identity[PSK_MAX_IDENTITY_LEN];
 			unsigned char *t = NULL;
+            /*
+             * plain PSK case:
+             *   N = len(psk) in octets
+             *   pre_ms = N + N*'0' + N + psk 
+             * RSA-PSK case:
+             *   uint16 prefix = 48
+             *   pre_ms = prefix + epms + psk_len + psk
+             *              2b      ?b      2b      ?b
+             */
 			unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
 			unsigned int pre_ms_len = 0, psk_len = 0;
 			int psk_err = 1;
@@ -3021,6 +3050,8 @@ int ssl3_send_client_key_exchange(SSL *s
 				goto err;
 				}
 
+            /* fills psk_len, identity and psk_or_pre_ms */
+            /* psk_or_pre_ms is filled with the psk at the beginning */
 			psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,
 				identity, PSK_MAX_IDENTITY_LEN,
 				psk_or_pre_ms, sizeof(psk_or_pre_ms));
@@ -3037,14 +3068,25 @@ int ssl3_send_client_key_exchange(SSL *s
 				goto psk_err;
 				}
 
-			/* create PSK pre_master_secret */
+			/* create PSK pre_master_secret, it should look like pre_ms at the end
+             *
+             * // currently the psk is at the beginning of psk_or_pre_ms
+             * psk_or_pre_ms = [psk]....
+             *
+             * N = len(psk) in octets
+             *          [A]    [B]      [C]    [D]
+             * pre_ms =  N +  N*'0'  +   N  +  psk
+             *          2b +  N byt  +  2b  +  N bytes */
 			pre_ms_len = 2+psk_len+2+psk_len;
 			t = psk_or_pre_ms;
+            /* copy the psk to 4 bytes after the first psk (fills [D]) */
 			memmove(psk_or_pre_ms+psk_len+4, psk_or_pre_ms, psk_len);
+			// write psk_len as uint16 (2 bytes) into the first 2 bytes of t, increase t
 			s2n(psk_len, t);
-			memset(t, 0, psk_len);
-			t+=psk_len;
-			s2n(psk_len, t);
+			memset(t, 0, psk_len); // write psk_len zeroes into t
+			t+=psk_len; // increase t by psk_len
+			s2n(psk_len, t);    // write psk_len as uint16 into t
+            // at this point, psk_or_pre_ms is filled with all required values
 
 			if (s->session->psk_identity_hint != NULL)
 				OPENSSL_free(s->session->psk_identity_hint);
@@ -3067,14 +3109,19 @@ int ssl3_send_client_key_exchange(SSL *s
 				goto psk_err;
 				}
 
+            /* generate the master secret based on premaster secret in psk_or_pre_ms */
 			s->session->master_key_length =
 				s->method->ssl3_enc->generate_master_secret(s,
 					s->session->master_key,
 					psk_or_pre_ms, pre_ms_len); 
+            /* now build the ClientKeyExchange message
+             * which consists of the psk_identity encoded as opaque */
+            /* I think n must contain the length of the whole ClientKeyExchange 
+             * message, thus update it accordingly! */
 			n = strlen(identity);
-			s2n(n, p);
-			memcpy(p, identity, n);
-			n+=2;
+			s2n(n, p); // write n as uint16 into p
+			memcpy(p, identity, n); // copy identity into p
+			n+=2; // increase n (2 length bytes)
 			psk_err = 0;
 		psk_err:
 			OPENSSL_cleanse(identity, PSK_MAX_IDENTITY_LEN);
@@ -3086,6 +3133,164 @@ int ssl3_send_client_key_exchange(SSL *s
 				}
 			}
 #endif
+#ifndef OPENSSL_NO_PSK
+#ifndef OPENSSL_NO_RSA
+        /** RSA-PSK case **/
+		else if (alg_k & SSL_kRSAPSK)        // CJD
+			{
+			char identity[PSK_MAX_IDENTITY_LEN];
+			unsigned char *t = NULL;            // temp
+            /* stores the premaster secret */
+			unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
+			unsigned int pre_ms_len = 0, psk_len = 0;
+            RSA *rsa;
+            int enc_n; // contains number of encrypted bytes after RSA encryption
+			int psk_err = 1;
+
+			n = 0;
+			if (s->psk_client_callback == NULL)
+				{
+				SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+					SSL_R_PSK_NO_CLIENT_CB);
+				goto err;
+				}
+
+			psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,
+				identity, PSK_MAX_IDENTITY_LEN,
+				psk_or_pre_ms, sizeof(psk_or_pre_ms));
+			if (psk_len > PSK_MAX_PSK_LEN)
+				{
+				SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+					ERR_R_INTERNAL_ERROR);
+				goto rsapsk_err;
+				}
+			else if (psk_len == 0)
+				{
+				SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+					SSL_R_PSK_IDENTITY_NOT_FOUND);
+				goto rsapsk_err;
+				}
+
+			/* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
+             *
+             * // currently the psk is at the beginning of psk_or_pre_ms
+             * psk_or_pre_ms = [psk]....
+             *
+             * N = len(psk) in octets
+             *          [A]     [B1]     [B2]     [C]    [D]
+             * pre_ms = 48 +  version + random +   N  +  psk
+             *          2b +     2b   +   46b  +  2b  +  N bytes */
+			pre_ms_len = 2+2+46+2+psk_len;
+			// initialize t at beginning of psk_or_pre_ms, then increase it as necessary
+			t = psk_or_pre_ms;
+            // move the PSK from the beginning to the end   [D]
+			memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
+            // prefix (48 as uint16)  [A]
+            unsigned int pmsprefix = 48;
+            s2n(pmsprefix, t);   // write 48 into t, automatically increases t
+            // client version [B1]
+            psk_or_pre_ms[2]=s->client_version>>8;
+            psk_or_pre_ms[3]=s->client_version&0xff;
+            t+=2;
+            // 46 random bytes [B2]
+            if (RAND_bytes(&(psk_or_pre_ms[4]),46) <= 0)
+                    goto err;
+            t+=46;  // increase t by the length of the random bytes
+            // write psk_len into t    [C]
+			s2n(psk_len, t); // write psk_len as uint16 into t, increasing t
+            // at this point psk_or_pre_ms is filled with the premaster secret
+
+            /* copy psk_identity_hint from context into the session */
+			if (s->session->psk_identity_hint != NULL)
+				OPENSSL_free(s->session->psk_identity_hint);
+			s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+			if (s->ctx->psk_identity_hint != NULL &&
+				s->session->psk_identity_hint == NULL)
+				{
+				SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+					ERR_R_MALLOC_FAILURE);
+				goto rsapsk_err;
+				}
+
+            /* store the psk_identity in the session */
+			if (s->session->psk_identity != NULL)
+				OPENSSL_free(s->session->psk_identity);
+			s->session->psk_identity = BUF_strdup(identity);
+			if (s->session->psk_identity == NULL)
+				{
+				SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+					ERR_R_MALLOC_FAILURE);
+				goto rsapsk_err;
+				}
+
+			s->session->master_key_length =
+				s->method->ssl3_enc->generate_master_secret(s,
+					s->session->master_key,
+					psk_or_pre_ms, pre_ms_len); 
+
+            /* now build ClientKeyExchange payload which consists of
+             * psk_identity and the encrypted pre_ms, encoded like so:
+             *              [id_len] [identity] [epms_len] [epms]    
+             * len in bytes    2         k          2        m      */
+            /* get the rsa object which has the server's public key */
+			if (s->session->sess_cert->peer_rsa_tmp != NULL)
+                /* for this session the server's rsa has been extracted */
+				rsa=s->session->sess_cert->peer_rsa_tmp;
+			else
+				{
+                /* get the pubkey from the server's certificate */
+				pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
+                // FIXME CJD: do we need to check pkey->type for RSAPSK here?
+				if ((pkey == NULL) ||                 // pubkey is NULL
+					(pkey->type != EVP_PKEY_RSA) ||   // pubkey cannot be used for RSA
+					(pkey->pkey.rsa == NULL))         // pubkey's rsa obj is NULL
+					{
+					SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,ERR_R_INTERNAL_ERROR);
+					goto err; // FIXME CJD: check target, maybe rsapsk_err?
+					}
+				rsa=pkey->pkey.rsa;
+				EVP_PKEY_free(pkey);
+				}
+
+            t=p;
+            /* n must finally contain the length of the 
+             * whole ClientKeyExchange payload, thus update it accordingly! */
+			n = strlen(identity);
+			s2n(n, t);              // write n as uint16 into t, increasing t (t=p+2)
+			memcpy(t, identity, n); // copy identity into t (n bytes long)
+            t+=n; // t = p+2+n
+			/* increase n by 2 as the length of identity was written before */
+			n+=2; // n now covers [id_len] and [identity]
+
+            /* write encrypted pre_ms into t, leaving space 
+             * for the length before (2 bytes) therefore t+2 */
+            // encrypt 48 bytes from psk_or_pre_ms into t
+            enc_n=RSA_public_encrypt(48, &(psk_or_pre_ms[2]), 
+                t+2, rsa, RSA_PKCS1_PADDING);
+            if (enc_n <= 0)
+                {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_ENCRYPT);
+                goto err;
+                }
+            n+=enc_n;
+            s2n(enc_n, t); // write the length of the encrypted pms in front of epms
+            n+=2; // add the 2 bytes that are needed for [epms_len]
+            
+            /* Fix buf for TLS and beyond */
+            // NOT NEEDED
+            
+			psk_err = 0;
+		rsapsk_err:
+			OPENSSL_cleanse(identity, PSK_MAX_IDENTITY_LEN);
+			OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
+			if (psk_err != 0)
+				{
+				ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);
+				goto err;
+				}
+			}
+#endif /* OPENSSL_NO_RSA */
+#endif /* OPENSSL_NO_PSK */
 		else
 			{
 			ssl3_send_alert(s, SSL3_AL_FATAL,
@@ -3487,7 +3692,7 @@ int ssl3_check_cert_and_algorithm(SSL *s
 		}
 #endif
 #ifndef OPENSSL_NO_RSA
-	if ((alg_k & SSL_kRSA) &&
+	if ((alg_k & (SSL_kRSA|SSL_kRSAPSK)) && // CJD: CHECKME: not 100% sure
 		!(has_bits(i,EVP_PK_RSA|EVP_PKT_ENC) || (rsa != NULL)))
 		{
 		SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM,SSL_R_MISSING_RSA_ENCRYPTING_CERT);
@@ -3520,7 +3725,7 @@ int ssl3_check_cert_and_algorithm(SSL *s
 	if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) && !has_bits(i,EVP_PKT_EXP))
 		{
 #ifndef OPENSSL_NO_RSA
-		if (alg_k & SSL_kRSA)
+		if (alg_k & (SSL_kRSA|SSL_kRSAPSK)) // CJD
 			{
 			if (rsa == NULL
 			    || RSA_size(rsa)*8 > SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher))
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_lib.c OpenSSL_1_0_2-stable-patched/ssl/s3_lib.c
--- OpenSSL_1_0_2-stable/ssl/s3_lib.c	2014-08-19 11:23:31.557950757 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/s3_lib.c	2014-08-19 10:46:35.000000000 +0200
@@ -1715,6 +1715,27 @@ OPENSSL_GLOBAL const SSL_CIPHER ssl3_cip
 	256,
 	256,
 	},
+
+#ifndef OPENSSL_NO_RSA
+    /** RSA-PSK ciphersuites **/
+    // FIXME: add RSA-PSK ciphers 92-94
+
+	/* Cipher 95 */
+	{
+	1,
+	TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA,
+	TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA,
+	SSL_kRSAPSK,
+	SSL_aRSA,
+	SSL_AES256,
+	SSL_SHA1,
+	SSL_TLSV1,
+	SSL_NOT_EXP|SSL_HIGH,
+	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
+	256,
+	256,
+	},
+#endif  /* OPENSSL_NO_RSA */
 #endif  /* OPENSSL_NO_PSK */
 
 #ifndef OPENSSL_NO_SEED
@@ -4384,7 +4405,7 @@ SSL_CIPHER *ssl3_choose_cipher(SSL *s, S
 #endif /* OPENSSL_NO_KRB5 */
 #ifndef OPENSSL_NO_PSK
 		/* with PSK there must be server callback set */
-		if ((alg_k & SSL_kPSK) && s->psk_server_callback == NULL)
+		if ((alg_k & (SSL_kPSK|SSL_kRSAPSK)) && s->psk_server_callback == NULL)
 			continue;
 #endif /* OPENSSL_NO_PSK */
 
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_srvr.c OpenSSL_1_0_2-stable-patched/ssl/s3_srvr.c
--- OpenSSL_1_0_2-stable/ssl/s3_srvr.c	2014-08-19 11:23:31.558950757 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/s3_srvr.c	2014-08-19 11:10:24.000000000 +0200
@@ -415,8 +415,8 @@ int ssl3_accept(SSL *s)
 
 		case SSL3_ST_SW_CERT_A:
 		case SSL3_ST_SW_CERT_B:
-			/* Check if it is anon DH or anon ECDH, */
-			/* normal PSK or KRB5 or SRP */
+			/* If it is anon DH or anon ECDH, */
+			/* normal PSK or KRB5 or SRP, then don't send server cert(s) */
 			if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aKRB5|SSL_aSRP))
 				&& !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
 				{
@@ -466,7 +466,8 @@ int ssl3_accept(SSL *s)
 			/* only send if a DH key exchange, fortezza or
 			 * RSA but we have a sign only certificate
 			 *
-			 * PSK: may send PSK identity hints
+			 * PSK|RSAPSK: may send PSK identity hints.
+             *   Send ServerKeyExchange if PSK identity hint is provided.
 			 *
 			 * For ECC ciphersuites, we send a serverKeyExchange
 			 * message only if the cipher suite is either
@@ -475,10 +476,9 @@ int ssl3_accept(SSL *s)
 			 * public key for key exchange.
 			 */
 			if (s->s3->tmp.use_rsa_tmp
-			/* PSK: send ServerKeyExchange if PSK identity
-			 * hint if provided */
 #ifndef OPENSSL_NO_PSK
-			    || ((alg_k & SSL_kPSK) && s->ctx->psk_identity_hint)
+                /* send ServKeyExch if PSK identity hint is provided */
+			    || ((alg_k & (SSL_kPSK|SSL_kRSAPSK)) && s->ctx->psk_identity_hint)
 #endif
 #ifndef OPENSSL_NO_SRP
 			    /* SRP: send ServerKeyExchange */
@@ -526,7 +526,10 @@ int ssl3_accept(SSL *s)
 				(s->s3->tmp.new_cipher->algorithm_auth & SSL_aSRP)
 				/* With normal PSK Certificates and
 				 * Certificate Requests are omitted */
-				|| (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
+				/* CJD: I am not sure whether kRSAPSK falls into the same
+				* category. I think, with kRSAPSK client certs make no
+				* sense either, thus the CertRequest can be skipped, too. */
+				|| (s->s3->tmp.new_cipher->algorithm_mkey & (SSL_kPSK|SSL_kRSAPSK)))
 				{
 				/* no cert request */
 				skip=1;
@@ -1629,6 +1632,7 @@ int ssl3_send_server_key_exchange(SSL *s
 		r[0]=r[1]=r[2]=r[3]=NULL;
 		n=0;
 #ifndef OPENSSL_NO_RSA
+        /** plain RSA case for ServerKeyExchange **/
 		if (type & SSL_kRSA)
 			{
 			rsa=cert->rsa_tmp;
@@ -1894,6 +1898,47 @@ int ssl3_send_server_key_exchange(SSL *s
 			}
 		else 
 #endif
+#ifndef OPENSSL_NO_RSA
+#ifndef OPENSSL_NO_PSK
+        /** RSAPSK case for ServerKeyExchange **/
+		if (type & SSL_kRSAPSK) // CJD
+			{
+            /* RSA part */
+            /** NOTE: Using temporary RSA keys with RSAPSK does not make sense.
+             * We should probably remove the temp RSA key part from RSAPSK case. */
+            /*
+			rsa=cert->rsa_tmp;
+			if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL))
+				{
+				rsa=s->cert->rsa_tmp_cb(s,
+				      SSL_C_IS_EXPORT(s->s3->tmp.new_cipher),
+				      SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher));
+				if(rsa == NULL)
+				{
+					al=SSL_AD_HANDSHAKE_FAILURE;
+					SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,SSL_R_ERROR_GENERATING_TMP_RSA_KEY);
+					goto f_err;
+				}
+				RSA_up_ref(rsa);
+				cert->rsa_tmp=rsa;
+				}
+			if (rsa == NULL)
+				{
+				al=SSL_AD_HANDSHAKE_FAILURE;
+				SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,SSL_R_MISSING_TMP_RSA_KEY);
+				goto f_err;
+				}
+			r[0]=rsa->n;
+			r[1]=rsa->e;
+			s->s3->tmp.use_rsa_tmp=1;
+            */
+            /* PSK part */
+		    /* reserve size for record length and PSK identity hint */
+			n+=2+strlen(s->ctx->psk_identity_hint);
+			}
+		else
+#endif /* !OPENSSL_NO_PSK */
+#endif /* !OPENSSL_NO_RSA */
 			{
 			al=SSL_AD_HANDSHAKE_FAILURE;
 			SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE);
@@ -1912,6 +1957,8 @@ int ssl3_send_server_key_exchange(SSL *s
 
 		if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP))
 			&& !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
+            /* CJD: no change needed for RSAPSK. we need the pkey 
+             * in case of RSAPSK. */
 			{
 			if ((pkey=ssl_get_sign_pkey(s,s->s3->tmp.new_cipher,&md))
 				== NULL)
@@ -1976,9 +2023,9 @@ int ssl3_send_server_key_exchange(SSL *s
 #endif
 
 #ifndef OPENSSL_NO_PSK
-		if (type & SSL_kPSK)
+		if (type & (SSL_kPSK|SSL_kRSAPSK)) // CJD
 			{
-			/* copy PSK identity hint */
+			/* copy PSK identity hint into ServerKeyExchange msg */
 			s2n(strlen(s->ctx->psk_identity_hint), p); 
 			strncpy((char *)p, s->ctx->psk_identity_hint, strlen(s->ctx->psk_identity_hint));
 			p+=strlen(s->ctx->psk_identity_hint);
@@ -1993,6 +2040,7 @@ int ssl3_send_server_key_exchange(SSL *s
 #ifndef OPENSSL_NO_RSA
 			if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s))
 				{
+                if(!(type & SSL_kRSAPSK)) {
 				q=md_buf;
 				j=0;
 				for (num=2; num > 0; num--)
@@ -2017,6 +2065,7 @@ int ssl3_send_server_key_exchange(SSL *s
 					}
 				s2n(u,p);
 				n+=u+2;
+		}
 				}
 			else
 #endif
@@ -2220,6 +2269,7 @@ int ssl3_get_client_key_exchange(SSL *s)
 	alg_k=s->s3->tmp.new_cipher->algorithm_mkey;
 
 #ifndef OPENSSL_NO_RSA
+    /** plain RSA case for ClientKeyExchange **/
 	if (alg_k & SSL_kRSA)
 		{
 		unsigned char rand_premaster_secret[SSL_MAX_MASTER_KEY_LENGTH];
@@ -2258,7 +2308,9 @@ int ssl3_get_client_key_exchange(SSL *s)
 		/* TLS and [incidentally] DTLS{0xFEFF} */
 		if (s->version > SSL3_VERSION && s->version != DTLS1_BAD_VER)
 			{
-			n2s(p,i);
+			n2s(p,i);   // read uint16 from p into i, increases p by 2
+            /* guess: n contains message length
+             * compare n with the specified length in i */
 			if (n != i+2)
 				{
 				if (!(s->options & SSL_OP_TLS_D5_BUG))
@@ -2818,6 +2870,7 @@ int ssl3_get_client_key_exchange(SSL *s)
 	else
 #endif
 #ifndef OPENSSL_NO_PSK
+        /** plain PSK case **/
 		if (alg_k & SSL_kPSK)
 			{
 			unsigned char *t = NULL;
@@ -2957,6 +3010,235 @@ int ssl3_get_client_key_exchange(SSL *s)
 			}
 		else
 #endif	/* OPENSSL_NO_SRP */
+#ifndef OPENSSL_NO_RSA
+#ifndef OPENSSL_NO_PSK
+    /** This handles RSA-PSK ClientKeyExchange **/
+	if (alg_k & SSL_kRSAPSK)
+		{
+        unsigned char *t = NULL;
+        /* orig_p points to the initial value of p and is required 
+         * for a call to OPENSSL_cleanse at the end. don't touch! */
+        unsigned char *orig_p = p;
+        unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
+        unsigned int pre_ms_len = 0, psk_len = 0;
+        char tmp_id[PSK_MAX_IDENTITY_LEN+1]; // temp storage for the identity str
+        int b_consumed = 0; // counts the number of consumed bytes of CKE payload
+        int epms_len = 0; // length of encrypted premaster secret
+        int psk_err = 1; // error flag for the RSAPSK branch
+
+        /**
+         * things defined elsewhere, but used here (CKE=ClientKeyExchange):
+         * n (probably) contains the CKE payload length 
+         * p points to the CKE payload **/
+
+		/* FIX THIS UP EAY EAY EAY EAY */
+		if (s->s3->tmp.use_rsa_tmp)
+			{
+			if ((s->cert != NULL) && (s->cert->rsa_tmp != NULL))
+				rsa=s->cert->rsa_tmp;
+			/* Don't do a callback because rsa_tmp should
+			 * be sent already */
+			if (rsa == NULL)
+				{
+				al=SSL_AD_HANDSHAKE_FAILURE;
+				SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_MISSING_TMP_RSA_PKEY);
+				goto rsapsk_err;
+				}
+			}
+		else
+			{
+			pkey=s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey;
+			if (	(pkey == NULL) ||
+				(pkey->type != EVP_PKEY_RSA) ||
+				(pkey->pkey.rsa == NULL))
+				{
+				al=SSL_AD_HANDSHAKE_FAILURE;
+				SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_MISSING_RSA_CERTIFICATE);
+				goto rsapsk_err;
+				}
+			rsa=pkey->pkey.rsa;
+			}
+
+        /* In plain RSA key exchange, the ClientKeyExchange payload consists 
+         * of epms_len (2 bytes) and the encrypted premaster secret (>SSLv3).
+         *               [epms_len] [epms] 
+         * len in bytes       2        m     
+         *
+         * For RSAPSK it looks like so:
+         *               [id_len] [identity] [epms_len] [epms] 
+         * len in bytes     2         k          2        m     
+         *
+         * [epms], when decrypted, consists of:
+         *               [version] [random_by_client]
+         * len in bytes      2            46                             */
+        /* read and check id_len */
+        n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
+        b_consumed+=2; // increase the total num of CKE payload bytes read
+        if (i > PSK_MAX_IDENTITY_LEN)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                SSL_R_DATA_LENGTH_TOO_LONG);
+            goto rsapsk_err;
+            }
+        if (s->psk_server_callback == NULL)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_NO_SERVER_CB);
+            goto rsapsk_err;
+            }
+
+        /* read identity */
+        /* Create guaranteed NULL-terminated identity
+         * string for the callback */
+        memcpy(tmp_id, p, i);
+        p+=i; // make p point to after [identity]
+        b_consumed+=i;
+        // fill remaining space in tmp_id with zeroes
+        memset(tmp_id+i, 0, PSK_MAX_IDENTITY_LEN+1-i);
+        /* get the PSK via callback */
+        psk_len = s->psk_server_callback(s, tmp_id,
+            psk_or_pre_ms, sizeof(psk_or_pre_ms));
+        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
+
+        // psk_len error handling
+        if (psk_len > PSK_MAX_PSK_LEN)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                ERR_R_INTERNAL_ERROR);
+            goto rsapsk_err;
+            }
+        else if (psk_len == 0)
+            {
+            /* PSK related to the given identity not found */
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_IDENTITY_NOT_FOUND);
+            al=SSL_AD_UNKNOWN_PSK_IDENTITY;
+            goto rsapsk_err;
+            }
+
+        /** read epms_len and then read and decrypt epms **/
+        n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
+        epms_len=i;
+        /** 
+         * FIXME: add a check
+         *   epms_len     ==   (total_payload_len) - (payload_bytes_consumed)
+         *   epms_len  should equal   n - b_consumed                    **/
+        // decrypt  epms_len  bytes from p into p (the premaster secret)
+		i=RSA_private_decrypt(epms_len, p, p, 
+                rsa, RSA_PKCS1_PADDING);
+
+		al = -1;
+		
+		if (i != SSL_MAX_MASTER_KEY_LENGTH)
+			{
+			al=SSL_AD_DECODE_ERROR;
+			/* SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_DECRYPT); */
+			}
+
+        /** now check the version (first 2 bytes of the premaster secret) **/
+		if ((al == -1) && !((p[0] == (s->client_version>>8)) && (p[1] == (s->client_version & 0xff))))
+			{
+			/* The premaster secret must contain the same version number as the
+			 * ClientHello to detect version rollback attacks (strangely, the
+			 * protocol does not offer such protection for DH ciphersuites).
+			 * However, buggy clients exist that send the negotiated protocol
+			 * version instead if the server does not support the requested
+			 * protocol version.
+			 * If SSL_OP_TLS_ROLLBACK_BUG is set, tolerate such clients. */
+			if (!((s->options & SSL_OP_TLS_ROLLBACK_BUG) &&
+				(p[0] == (s->version>>8)) && (p[1] == (s->version & 0xff))))
+				{
+				al=SSL_AD_DECODE_ERROR;
+				/* SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_BAD_PROTOCOL_VERSION_NUMBER); */
+
+				/* The Klima-Pokorny-Rosa extension of Bleichenbacher's attack
+				 * (http://eprint.iacr.org/2003/052/) exploits the version
+				 * number check as a "bad version oracle" -- an alert would
+				 * reveal that the plaintext corresponding to some ciphertext
+				 * made up by the adversary is properly formatted except
+				 * that the version number is wrong.  To avoid such attacks,
+				 * we should treat this just like any other decryption error. */
+				}
+			}
+
+		if (al != -1)
+			{
+			/* Some decryption failure -- use random value instead as countermeasure
+			 * against Bleichenbacher's attack on PKCS #1 v1.5 RSA padding
+			 * (see RFC 2246, section 7.4.7.1). */
+			ERR_clear_error();
+			i = SSL_MAX_MASTER_KEY_LENGTH;
+			p[0] = s->client_version >> 8;
+			p[1] = s->client_version & 0xff;
+			if (RAND_pseudo_bytes(p+2, i-2) <= 0) /* should be RAND_bytes, but we cannot work around a failure */
+				goto rsapsk_err; // CHECKME CD: goto target correctly adapted? was err
+			}
+	
+        /* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
+         *
+         * // currently the psk is at the beginning of psk_or_pre_ms
+         * psk_or_pre_ms = [psk]....
+         *
+         * N = len(psk) in octets
+         *          [A]     [B1]     [B2]     [C]    [D]
+         * pre_ms = 48 +  version + random +   N  +  psk
+         *          2b +     2b   +   46b  +  2b  +  N bytes */
+        pre_ms_len=2+2+46+2+psk_len;
+        // initialize t at beginning of psk_or_pre_ms, then increase it as necessary
+        t = psk_or_pre_ms;
+        // move the PSK from the beginning to the end   [D]
+        memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
+        // prefix (48 as uint16)  [A]
+        unsigned int pmsprefix = 48;
+        s2n(pmsprefix, t);   // write 48 into t, automatically increases t
+        // copy version [B1] and random [B2] (48 bytes) from p into t
+        memcpy(t, p, 48);
+        t+=48;
+        // write psk_len into t   [C]
+        s2n(psk_len, t);
+        // at this point psk_or_pre_ms is filled with the premaster secret
+
+        if (s->session->psk_identity != NULL)
+            OPENSSL_free(s->session->psk_identity);
+        /* in the plain PSK case, the following line copies the identity
+         * from the payload into the session. must be adapted for the
+         * RSAPSK case. */
+        //s->session->psk_identity = BUF_strdup((char *)p);
+        // CHECKME CD: is this correctly adapted? CD
+        s->session->psk_identity = BUF_strdup(tmp_id);
+        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
+        if (s->session->psk_identity == NULL)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                ERR_R_MALLOC_FAILURE);
+            goto rsapsk_err;
+            }
+
+        if (s->session->psk_identity_hint != NULL)
+            OPENSSL_free(s->session->psk_identity_hint);
+        s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+        if (s->ctx->psk_identity_hint != NULL &&
+            s->session->psk_identity_hint == NULL)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                ERR_R_MALLOC_FAILURE);
+            goto rsapsk_err;
+            }
+
+        s->session->master_key_length=
+            s->method->ssl3_enc->generate_master_secret(s,
+                s->session->master_key, psk_or_pre_ms, pre_ms_len);
+        psk_err = 0;
+		//FIXME OPENSSL_cleanse(p,i); // this came from the plain RSA case and cleans the 48 bytes decrypted premaster secret
+        OPENSSL_cleanse(orig_p, n); // clear the whole payload area
+    rsapsk_err: // this label has been renamed from psk_err ro rsapsk_err
+        OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
+        if (psk_err != 0)
+            goto f_err;
+        }
+    else
+#endif /* !OPENSSL_NO_PSK */
+#endif /* !OPENSSL_NO_RSA */
 		if (alg_k & SSL_kGOST) 
 			{
 			int ret = 0;
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl_ciph.c OpenSSL_1_0_2-stable-patched/ssl/ssl_ciph.c
--- OpenSSL_1_0_2-stable/ssl/ssl_ciph.c	2014-08-19 11:23:31.561950757 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/ssl_ciph.c	2014-08-19 10:46:35.000000000 +0200
@@ -256,6 +256,7 @@ static const SSL_CIPHER cipher_aliases[]
 
         {0,SSL_TXT_kPSK,0,    SSL_kPSK,  0,0,0,0,0,0,0,0},
 	{0,SSL_TXT_kSRP,0,    SSL_kSRP,  0,0,0,0,0,0,0,0},
+	{0,SSL_TXT_kRSAPSK,0, SSL_kRSAPSK,  0,0,0,0,0,0,0,0},
 	{0,SSL_TXT_kGOST,0, SSL_kGOST,0,0,0,0,0,0,0,0},
 
 	/* server authentication aliases */
@@ -268,7 +269,7 @@ static const SSL_CIPHER cipher_aliases[]
 	{0,SSL_TXT_aECDH,0,   0,SSL_aECDH, 0,0,0,0,0,0,0},
 	{0,SSL_TXT_aECDSA,0,  0,SSL_aECDSA,0,0,0,0,0,0,0},
 	{0,SSL_TXT_ECDSA,0,   0,SSL_aECDSA, 0,0,0,0,0,0,0},
-        {0,SSL_TXT_aPSK,0,    0,SSL_aPSK,  0,0,0,0,0,0,0},
+    {0,SSL_TXT_aPSK,0,    0,SSL_aPSK,  0,0,0,0,0,0,0},
 	{0,SSL_TXT_aGOST94,0,0,SSL_aGOST94,0,0,0,0,0,0,0},
 	{0,SSL_TXT_aGOST01,0,0,SSL_aGOST01,0,0,0,0,0,0,0},
 	{0,SSL_TXT_aGOST,0,0,SSL_aGOST94|SSL_aGOST01,0,0,0,0,0,0,0},
@@ -285,6 +286,7 @@ static const SSL_CIPHER cipher_aliases[]
 	{0,SSL_TXT_ADH,0,     SSL_kDHE,SSL_aNULL,0,0,0,0,0,0,0},
 	{0,SSL_TXT_AECDH,0,   SSL_kECDHE,SSL_aNULL,0,0,0,0,0,0,0},
         {0,SSL_TXT_PSK,0,     SSL_kPSK,SSL_aPSK,0,0,0,0,0,0,0},
+	{0,SSL_TXT_RSAPSK,0,  SSL_kRSAPSK,SSL_aRSA,0,0,0,0,0,0,0},
 	{0,SSL_TXT_SRP,0,     SSL_kSRP,0,0,0,0,0,0,0,0},
 
 
@@ -755,7 +757,7 @@ static void ssl_cipher_get_disabled(unsi
 	*auth |= SSL_aECDH;
 #endif
 #ifdef OPENSSL_NO_PSK
-	*mkey |= SSL_kPSK;
+	*mkey |= SSL_kPSK|SSL_kRSAPSK;
 	*auth |= SSL_aPSK;
 #endif
 #ifdef OPENSSL_NO_SRP
@@ -1535,6 +1537,8 @@ STACK_OF(SSL_CIPHER) *ssl_create_cipher_
 	ssl_cipher_apply_rule(0, 0, SSL_aECDH, 0, 0, 0, 0, CIPHER_ORD, -1, &head, &tail);
 	/* ssl_cipher_apply_rule(0, 0, SSL_aDH, 0, 0, 0, 0, CIPHER_ORD, -1, &head, &tail); */
 	ssl_cipher_apply_rule(0, SSL_kRSA, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head, &tail);
+    // CHECKME CD: RSAPSK comes before plain PSK
+	ssl_cipher_apply_rule(0, SSL_kRSAPSK, 0,0, 0, 0, 0, CIPHER_ORD, -1, &head, &tail);
 	ssl_cipher_apply_rule(0, SSL_kPSK, 0,0, 0, 0, 0, CIPHER_ORD, -1, &head, &tail);
 	ssl_cipher_apply_rule(0, SSL_kKRB5, 0,0, 0, 0, 0, CIPHER_ORD, -1, &head, &tail);
 
@@ -1711,6 +1715,9 @@ char *SSL_CIPHER_description(const SSL_C
 	case SSL_kPSK:
 		kx="PSK";
 		break;
+	case SSL_kRSAPSK:
+		kx="RSAPSK";
+		break;
 	case SSL_kSRP:
 		kx="SRP";
 		break;
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl.h OpenSSL_1_0_2-stable-patched/ssl/ssl.h
--- OpenSSL_1_0_2-stable/ssl/ssl.h	2014-08-19 11:23:31.559950757 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/ssl.h	2014-08-19 11:13:37.000000000 +0200
@@ -252,7 +252,8 @@ extern "C" {
 #define SSL_TXT_kECDH		"kECDH"
 #define SSL_TXT_kEECDH		"kEECDH" /* alias for kECDHE */
 #define SSL_TXT_kECDHE		"kECDHE"
-#define SSL_TXT_kPSK            "kPSK"
+#define SSL_TXT_kPSK		"kPSK"
+#define SSL_TXT_kRSAPSK		"kRSAPSK"
 #define SSL_TXT_kGOST		"kGOST"
 #define SSL_TXT_kSRP		"kSRP"
 
@@ -281,6 +282,7 @@ extern "C" {
 #define SSL_TXT_ECDSA		"ECDSA"
 #define SSL_TXT_KRB5      	"KRB5"
 #define SSL_TXT_PSK             "PSK"
+#define SSL_TXT_RSAPSK		"RSAPSK"
 #define SSL_TXT_SRP		"SRP"
 
 #define SSL_TXT_DES		"DES"
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl_lib.c OpenSSL_1_0_2-stable-patched/ssl/ssl_lib.c
--- OpenSSL_1_0_2-stable/ssl/ssl_lib.c	2014-08-19 11:23:31.562950756 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/ssl_lib.c	2014-08-19 11:17:38.000000000 +0200
@@ -1501,9 +1501,23 @@ int ssl_cipher_list_to_bytes(SSL *s,STAC
 	for (i=0; i<sk_SSL_CIPHER_num(sk); i++)
 		{
 		c=sk_SSL_CIPHER_value(sk,i);
+		
 		/* Skip disabled ciphers */
 		if (ssl_cipher_disabled(s, c, SSL_SECOP_CIPHER_SUPPORTED))
 			continue;
+		
+#ifndef OPENSSL_NO_KRB5
+		if (((c->algorithm_mkey & SSL_kKRB5) || (c->algorithm_auth & SSL_aKRB5)) &&
+			nokrb5)
+			continue;
+#endif /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+		/* with PSK there must be client callback set */
+		if (((c->algorithm_mkey & (SSL_kPSK|SSL_kRSAPSK)) 
+			|| (c->algorithm_auth & SSL_aPSK)) &&
+			s->psk_client_callback == NULL)
+			continue;
+#endif
 #ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL
 		if (c->id == SSL3_CK_SCSV)
 			{
@@ -2492,8 +2506,10 @@ void ssl_set_cert_masks(CERT *c, const S
 
 #ifndef OPENSSL_NO_PSK
 	mask_k |= SSL_kPSK;
+	mask_k |= SSL_kRSAPSK;   // CJD
 	mask_a |= SSL_aPSK;
 	emask_k |= SSL_kPSK;
+	emask_k |= SSL_kRSAPSK;  // CJD
 	emask_a |= SSL_aPSK;
 #endif
 
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl_locl.h OpenSSL_1_0_2-stable-patched/ssl/ssl_locl.h
--- OpenSSL_1_0_2-stable/ssl/ssl_locl.h	2014-08-19 11:23:31.562950756 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/ssl_locl.h	2014-08-19 10:46:35.000000000 +0200
@@ -301,6 +301,7 @@
 #define SSL_kPSK		0x00000100L /* PSK */
 #define SSL_kGOST       0x00000200L /* GOST key exchange */
 #define SSL_kSRP        0x00000400L /* SRP */
+#define SSL_kRSAPSK		0x00000800L /* RSA-PSK */
 
 /* Bits for algorithm_auth (server authentication) */
 #define SSL_aRSA		0x00000001L /* RSA auth */
diff -rupN OpenSSL_1_0_2-stable/ssl/tls1.h OpenSSL_1_0_2-stable-patched/ssl/tls1.h
--- OpenSSL_1_0_2-stable/ssl/tls1.h	2014-08-19 11:23:31.565950756 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/tls1.h	2014-08-19 10:46:35.000000000 +0200
@@ -412,6 +412,9 @@ SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_T
 #define TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA               0x0300008B
 #define TLS1_CK_PSK_WITH_AES_128_CBC_SHA                0x0300008C
 #define TLS1_CK_PSK_WITH_AES_256_CBC_SHA                0x0300008D
+/* RSA-PSK */
+// FIXME: add RSA-PSK ciphers 92-94 here, too
+#define TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA            0x03000095
 
 /* Additional TLS ciphersuites from expired Internet Draft
  * draft-ietf-tls-56-bit-ciphersuites-01.txt
@@ -641,6 +644,8 @@ SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_T
 #define TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA		"PSK-3DES-EDE-CBC-SHA"
 #define TLS1_TXT_PSK_WITH_AES_128_CBC_SHA		"PSK-AES128-CBC-SHA"
 #define TLS1_TXT_PSK_WITH_AES_256_CBC_SHA		"PSK-AES256-CBC-SHA"
+// FIXME: add the 3 other RSA-PSK ciphers here, too
+#define TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA		"RSA-PSK-AES256-CBC-SHA"
 
 /* SRP ciphersuite from RFC 5054 */
 #define TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA		"SRP-3DES-EDE-CBC-SHA"
