diff -rupN OpenSSL_1_0_2-stable/ssl/s3_clnt.c OpenSSL_1_0_2-stable_patched/ssl/s3_clnt.c
--- OpenSSL_1_0_2-stable/ssl/s3_clnt.c	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/s3_clnt.c	2015-08-25 16:38:09.209363296 +0200
@@ -1455,7 +1455,8 @@ int ssl3_get_key_exchange(SSL *s)
     al = SSL_AD_DECODE_ERROR;
 
 #ifndef OPENSSL_NO_PSK
-    if (alg_k & SSL_kPSK) {
+    /* handle PSK identity hint */
+    if (alg_k & (SSL_kPSK|SSL_kRSAPSK)) { // CJD
         param_len = 2;
         if (param_len > n) {
             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);
@@ -1599,7 +1600,8 @@ int ssl3_get_key_exchange(SSL *s)
     } else
 #endif                          /* !OPENSSL_NO_SRP */
 #ifndef OPENSSL_NO_RSA
-    if (alg_k & SSL_kRSA) {
+    /* handle PSK identity hint */
+   if (alg_k & (SSL_kPSK|SSL_kRSAPSK)) // CJD
         /* Temporary RSA keys only allowed in export ciphersuites */
         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher)) {
             al = SSL_AD_UNEXPECTED_MESSAGE;
@@ -1976,7 +1978,7 @@ int ssl3_get_key_exchange(SSL *s)
         }
     } else {
         /* aNULL, aSRP or kPSK do not need public keys */
-        if (!(alg_a & (SSL_aNULL | SSL_aSRP)) && !(alg_k & SSL_kPSK)) {
+        if (!(alg_a & (SSL_aNULL | SSL_aSRP)) && !(alg_k & (SSL_kPSK|SSL_kRSAPSK))) {
             /* Might be wrong key type, check it */
             if (ssl3_check_cert_and_algorithm(s))
                 /* Otherwise this shouldn't happen */
@@ -3134,6 +3136,164 @@ int ssl3_send_client_key_exchange(SSL *s
             }
         }
 #endif
+#ifndef OPENSSL_NO_PSK
+#ifndef OPENSSL_NO_RSA
+        /** RSA-PSK case **/
+       else if (alg_k & SSL_kRSAPSK)        // CJD
+           {
+           char identity[PSK_MAX_IDENTITY_LEN];
+           unsigned char *t = NULL;            // temp
+            /* stores the premaster secret */
+           unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
+           unsigned int pre_ms_len = 0, psk_len = 0;
+            RSA *rsa;
+            int enc_n; // contains number of encrypted bytes after RSA encryption
+           int psk_err = 1;
+
+           n = 0;
+           if (s->psk_client_callback == NULL)
+               {
+               SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_NO_CLIENT_CB);
+               goto err;
+               }
+
+           psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,
+               identity, PSK_MAX_IDENTITY_LEN,
+               psk_or_pre_ms, sizeof(psk_or_pre_ms));
+           if (psk_len > PSK_MAX_PSK_LEN)
+               {
+               SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                   ERR_R_INTERNAL_ERROR);
+               goto rsapsk_err;
+               }
+           else if (psk_len == 0)
+               {
+               SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_IDENTITY_NOT_FOUND);
+               goto rsapsk_err;
+               }
+
+           /* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
+             *
+             * // currently the psk is at the beginning of psk_or_pre_ms
+             * psk_or_pre_ms = [psk]....
+             *
+             * N = len(psk) in octets
+             *          [A]     [B1]     [B2]     [C]    [D]
+             * pre_ms = 48 +  version + random +   N  +  psk
+             *          2b +     2b   +   46b  +  2b  +  N bytes */
+           pre_ms_len = 2+2+46+2+psk_len;
+           // initialize t at beginning of psk_or_pre_ms, then increase it as necessary
+           t = psk_or_pre_ms;
+            // move the PSK from the beginning to the end   [D]
+           memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
+            // prefix (48 as uint16)  [A]
+            unsigned int pmsprefix = 48;
+            s2n(pmsprefix, t);   // write 48 into t, automatically increases t
+            // client version [B1]
+            psk_or_pre_ms[2]=s->client_version>>8;
+            psk_or_pre_ms[3]=s->client_version&0xff;
+            t+=2;
+            // 46 random bytes [B2]
+            if (RAND_bytes(&(psk_or_pre_ms[4]),46) <= 0)
+                    goto err;
+            t+=46;  // increase t by the length of the random bytes
+            // write psk_len into t    [C]
+           s2n(psk_len, t); // write psk_len as uint16 into t, increasing t
+            // at this point psk_or_pre_ms is filled with the premaster secret
+
+            /* copy psk_identity_hint from context into the session */
+           if (s->session->psk_identity_hint != NULL)
+               OPENSSL_free(s->session->psk_identity_hint);
+           s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+           if (s->ctx->psk_identity_hint != NULL &&
+               s->session->psk_identity_hint == NULL)
+               {
+               SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                   ERR_R_MALLOC_FAILURE);
+               goto rsapsk_err;
+               }
+
+            /* store the psk_identity in the session */
+           if (s->session->psk_identity != NULL)
+               OPENSSL_free(s->session->psk_identity);
+           s->session->psk_identity = BUF_strdup(identity);
+           if (s->session->psk_identity == NULL)
+               {
+               SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                   ERR_R_MALLOC_FAILURE);
+               goto rsapsk_err;
+               }
+
+           s->session->master_key_length =
+               s->method->ssl3_enc->generate_master_secret(s,
+                   s->session->master_key,
+                   psk_or_pre_ms, pre_ms_len); 
+
+            /* now build ClientKeyExchange payload which consists of
+             * psk_identity and the encrypted pre_ms, encoded like so:
+             *              [id_len] [identity] [epms_len] [epms]    
+             * len in bytes    2         k          2        m      */
+            /* get the rsa object which has the server's public key */
+           if (s->session->sess_cert->peer_rsa_tmp != NULL)
+                /* for this session the server's rsa has been extracted */
+               rsa=s->session->sess_cert->peer_rsa_tmp;
+           else
+               {
+                /* get the pubkey from the server's certificate */
+               pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
+                // FIXME CJD: do we need to check pkey->type for RSAPSK here?
+               if ((pkey == NULL) ||                 // pubkey is NULL
+                   (pkey->type != EVP_PKEY_RSA) ||   // pubkey cannot be used for RSA
+                   (pkey->pkey.rsa == NULL))         // pubkey's rsa obj is NULL
+                   {
+                   SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,ERR_R_INTERNAL_ERROR);
+                   goto err; // FIXME CJD: check target, maybe rsapsk_err?
+                   }
+               rsa=pkey->pkey.rsa;
+               EVP_PKEY_free(pkey);
+               }
+
+            t=p;
+            /* n must finally contain the length of the 
+             * whole ClientKeyExchange payload, thus update it accordingly! */
+           n = strlen(identity);
+           s2n(n, t);              // write n as uint16 into t, increasing t (t=p+2)
+           memcpy(t, identity, n); // copy identity into t (n bytes long)
+            t+=n; // t = p+2+n
+           /* increase n by 2 as the length of identity was written before */
+           n+=2; // n now covers [id_len] and [identity]
+
+            /* write encrypted pre_ms into t, leaving space 
+             * for the length before (2 bytes) therefore t+2 */
+            // encrypt 48 bytes from psk_or_pre_ms into t
+            enc_n=RSA_public_encrypt(48, &(psk_or_pre_ms[2]), 
+                t+2, rsa, RSA_PKCS1_PADDING);
+            if (enc_n <= 0)
+                {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_ENCRYPT);
+                goto err;
+                }
+            n+=enc_n;
+            s2n(enc_n, t); // write the length of the encrypted pms in front of epms
+            n+=2; // add the 2 bytes that are needed for [epms_len]
+            
+            /* Fix buf for TLS and beyond */
+            // NOT NEEDED
+            
+           psk_err = 0;
+       rsapsk_err:
+           OPENSSL_cleanse(identity, PSK_MAX_IDENTITY_LEN);
+           OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
+           if (psk_err != 0)
+               {
+               ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);
+               goto err;
+               }
+           }
+#endif /* OPENSSL_NO_RSA */
+#endif /* OPENSSL_NO_PSK */
         else {
             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);
             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);
@@ -3493,7 +3653,7 @@ int ssl3_check_cert_and_algorithm(SSL *s
     }
 #endif
 #ifndef OPENSSL_NO_RSA
-    if (alg_k & SSL_kRSA) {
+    if (alg_k & (SSL_kRSA|SSL_kRSAPSK)) {
         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&
             !has_bits(i, EVP_PK_RSA | EVP_PKT_ENC)) {
             SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM,
@@ -3560,7 +3720,7 @@ int ssl3_check_cert_and_algorithm(SSL *s
     if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&
         pkey_bits > SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher)) {
 #ifndef OPENSSL_NO_RSA
-        if (alg_k & SSL_kRSA) {
+        if (alg_k & (SSL_kRSA|SSL_kRSAPSK)) {
             if (rsa == NULL) {
                 SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM,
                        SSL_R_MISSING_EXPORT_TMP_RSA_KEY);
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_lib.c OpenSSL_1_0_2-stable_patched/ssl/s3_lib.c
--- OpenSSL_1_0_2-stable/ssl/s3_lib.c	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/s3_lib.c	2015-08-25 16:03:00.215854933 +0200
@@ -1711,6 +1711,28 @@ OPENSSL_GLOBAL SSL_CIPHER ssl3_ciphers[]
      256,
      256,
      },
+
+#ifndef OPENSSL_NO_RSA
+    /** RSA-PSK ciphersuites **/
+    // FIXME: add RSA-PSK ciphers 92-94
+
+    /* Cipher 95 */
+    {
+    1,
+    TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA,
+    TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA,
+    SSL_kRSAPSK,
+    SSL_aRSA,
+    SSL_AES256,
+    SSL_SHA1,
+    SSL_TLSV1,
+    SSL_NOT_EXP|SSL_HIGH,
+    SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
+    256,
+    256,
+    },
+#endif  /* OPENSSL_NO_RSA */
+
 #endif                          /* OPENSSL_NO_PSK */
 
 #ifndef OPENSSL_NO_SEED
@@ -4126,7 +4148,7 @@ SSL_CIPHER *ssl3_choose_cipher(SSL *s, S
 #endif                          /* OPENSSL_NO_KRB5 */
 #ifndef OPENSSL_NO_PSK
         /* with PSK there must be server callback set */
-        if ((alg_k & SSL_kPSK) && s->psk_server_callback == NULL)
+        if ((alg_k & (SSL_kPSK|SSL_kRSAPSK)) && s->psk_server_callback == NULL)
             continue;
 #endif                          /* OPENSSL_NO_PSK */
 
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_srvr.c OpenSSL_1_0_2-stable_patched/ssl/s3_srvr.c
--- OpenSSL_1_0_2-stable/ssl/s3_srvr.c	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/s3_srvr.c	2015-08-25 17:09:19.976316414 +0200
@@ -419,8 +419,8 @@ int ssl3_accept(SSL *s)
 
         case SSL3_ST_SW_CERT_A:
         case SSL3_ST_SW_CERT_B:
-            /* Check if it is anon DH or anon ECDH, */
-            /* normal PSK or KRB5 or SRP */
+            /* If it is anon DH or anon ECDH, */
+            /* normal PSK or KRB5 or SRP, then don't send server cert(s) */
             if (!
                 (s->s3->tmp.
                  new_cipher->algorithm_auth & (SSL_aNULL | SSL_aKRB5 |
@@ -459,19 +459,17 @@ int ssl3_accept(SSL *s)
 
             /*
              * only send if a DH key exchange, fortezza or RSA but we have a
-             * sign only certificate PSK: may send PSK identity hints For
+             * sign only certificate PSK|RSAPSK: may send PSK identity hints. 
+             * Send ServerKeyExchange if PSK identity hint is provided. For
              * ECC ciphersuites, we send a serverKeyExchange message only if
              * the cipher suite is either ECDH-anon or ECDHE. In other cases,
              * the server certificate contains the server's public key for
              * key exchange.
              */
             if (0
-                /*
-                 * PSK: send ServerKeyExchange if PSK identity hint if
-                 * provided
-                 */
 #ifndef OPENSSL_NO_PSK
-                || ((alg_k & SSL_kPSK) && s->ctx->psk_identity_hint)
+                /* send ServKeyExch if PSK identity hint is provided */
+                || ((alg_k & (SSL_kPSK|SSL_kRSAPSK)) && s->ctx->psk_identity_hint)
 #endif
 #ifndef OPENSSL_NO_SRP
                 /* SRP: send ServerKeyExchange */
@@ -531,7 +529,10 @@ int ssl3_accept(SSL *s)
                     * With normal PSK Certificates and Certificate Requests
                     * are omitted
                     */
-                   || (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)) {
+                   /* CJD: I am not sure whether kRSAPSK falls into the same
+               * category. I think, with kRSAPSK client certs make no
+               * sense either, thus the CertRequest can be skipped, too. */
+               || (s->s3->tmp.new_cipher->algorithm_mkey & (SSL_kPSK|SSL_kRSAPSK))) {
                 /* no cert request */
                 skip = 1;
                 s->s3->tmp.cert_request = 0;
@@ -1628,6 +1629,7 @@ int ssl3_send_server_key_exchange(SSL *s
         r[0] = r[1] = r[2] = r[3] = NULL;
         n = 0;
 #ifndef OPENSSL_NO_RSA
+        /** plain RSA case for ServerKeyExchange **/
         if (type & SSL_kRSA) {
             rsa = cert->rsa_tmp;
             if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL)) {
@@ -1856,6 +1858,47 @@ int ssl3_send_server_key_exchange(SSL *s
             r[3] = s->srp_ctx.B;
         } else
 #endif
+#ifndef OPENSSL_NO_RSA
+#ifndef OPENSSL_NO_PSK
+        /** RSAPSK case for ServerKeyExchange **/
+       if (type & SSL_kRSAPSK) // CJD
+           {
+            /* RSA part */
+            /** NOTE: Using temporary RSA keys with RSAPSK does not make sense.
+             * We should probably remove the temp RSA key part from RSAPSK case. */
+            /*
+           rsa=cert->rsa_tmp;
+           if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL))
+               {
+               rsa=s->cert->rsa_tmp_cb(s,
+                     SSL_C_IS_EXPORT(s->s3->tmp.new_cipher),
+                     SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher));
+               if(rsa == NULL)
+               {
+                   al=SSL_AD_HANDSHAKE_FAILURE;
+                   SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,SSL_R_ERROR_GENERATING_TMP_RSA_KEY);
+                   goto f_err;
+               }
+               RSA_up_ref(rsa);
+               cert->rsa_tmp=rsa;
+               }
+           if (rsa == NULL)
+               {
+               al=SSL_AD_HANDSHAKE_FAILURE;
+               SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,SSL_R_MISSING_TMP_RSA_KEY);
+               goto f_err;
+               }
+           r[0]=rsa->n;
+           r[1]=rsa->e;
+           s->s3->tmp.use_rsa_tmp=1;
+            */
+            /* PSK part */
+           /* reserve size for record length and PSK identity hint */
+           n+=2+strlen(s->ctx->psk_identity_hint);
+           }
+       else
+#endif /* !OPENSSL_NO_PSK */
+#endif /* !OPENSSL_NO_RSA */       
         {
             al = SSL_AD_HANDSHAKE_FAILURE;
             SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,
@@ -1874,6 +1917,8 @@ int ssl3_send_server_key_exchange(SSL *s
 
         if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL | SSL_aSRP))
             && !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)) {
+            /* CJD: no change needed for RSAPSK. we need the pkey 
+             * in case of RSAPSK. */
             if ((pkey = ssl_get_sign_pkey(s, s->s3->tmp.new_cipher, &md))
                 == NULL) {
                 al = SSL_AD_DECODE_ERROR;
@@ -1928,8 +1973,8 @@ int ssl3_send_server_key_exchange(SSL *s
 #endif
 
 #ifndef OPENSSL_NO_PSK
-        if (type & SSL_kPSK) {
-            /* copy PSK identity hint */
+        if (type & (SSL_kPSK|SSL_kRSAPSK)) { // CJD
+            /* copy PSK identity hint into ServerKeyExchange msg */
             s2n(strlen(s->ctx->psk_identity_hint), p);
             strncpy((char *)p, s->ctx->psk_identity_hint,
                     strlen(s->ctx->psk_identity_hint));
@@ -1945,29 +1990,31 @@ int ssl3_send_server_key_exchange(SSL *s
              */
 #ifndef OPENSSL_NO_RSA
             if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {
-                q = md_buf;
-                j = 0;
-                for (num = 2; num > 0; num--) {
-                    EVP_MD_CTX_set_flags(&md_ctx,
-                                         EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-                    EVP_DigestInit_ex(&md_ctx, (num == 2)
-                                      ? s->ctx->md5 : s->ctx->sha1, NULL);
-                    EVP_DigestUpdate(&md_ctx, &(s->s3->client_random[0]),
-                                     SSL3_RANDOM_SIZE);
-                    EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),
-                                     SSL3_RANDOM_SIZE);
-                    EVP_DigestUpdate(&md_ctx, d, n);
-                    EVP_DigestFinal_ex(&md_ctx, q, (unsigned int *)&i);
-                    q += i;
-                    j += i;
-                }
-                if (RSA_sign(NID_md5_sha1, md_buf, j,
-                             &(p[2]), &u, pkey->pkey.rsa) <= 0) {
-                    SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_LIB_RSA);
-                    goto err;
+                if(!(type & SSL_kRSAPSK)) {
+                    q = md_buf;
+                    j = 0;
+                    for (num = 2; num > 0; num--) {
+                        EVP_MD_CTX_set_flags(&md_ctx,
+                                             EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+                        EVP_DigestInit_ex(&md_ctx, (num == 2)
+                                          ? s->ctx->md5 : s->ctx->sha1, NULL);
+                        EVP_DigestUpdate(&md_ctx, &(s->s3->client_random[0]),
+                                         SSL3_RANDOM_SIZE);
+                        EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),
+                                         SSL3_RANDOM_SIZE);
+                        EVP_DigestUpdate(&md_ctx, d, n);
+                        EVP_DigestFinal_ex(&md_ctx, q, (unsigned int *)&i);
+                        q += i;
+                        j += i;
+                    }
+                    if (RSA_sign(NID_md5_sha1, md_buf, j,
+                                 &(p[2]), &u, pkey->pkey.rsa) <= 0) {
+                        SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_LIB_RSA);
+                        goto err;
+                    }
+                    s2n(u, p);
+                    n += u + 2;
                 }
-                s2n(u, p);
-                n += u + 2;
             } else
 #endif
             if (md) {
@@ -2159,6 +2206,7 @@ int ssl3_get_client_key_exchange(SSL *s)
     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
 
 #ifndef OPENSSL_NO_RSA
+    /** plain RSA case for ClientKeyExchange **/
     if (alg_k & SSL_kRSA) {
         unsigned char rand_premaster_secret[SSL_MAX_MASTER_KEY_LENGTH];
         int decrypt_len;
@@ -2193,7 +2241,9 @@ int ssl3_get_client_key_exchange(SSL *s)
 
         /* TLS and [incidentally] DTLS{0xFEFF} */
         if (s->version > SSL3_VERSION && s->version != DTLS1_BAD_VER) {
-            n2s(p, i);
+            n2s(p,i);   // read uint16 from p into i, increases p by 2
+            /* guess: n contains message length
+             * compare n with the specified length in i */
             if (n != i + 2) {
                 if (!(s->options & SSL_OP_TLS_D5_BUG)) {
                     al = SSL_AD_DECODE_ERROR;
@@ -2721,6 +2771,7 @@ int ssl3_get_client_key_exchange(SSL *s)
     } else
 #endif
 #ifndef OPENSSL_NO_PSK
+    /** plain PSK case **/
     if (alg_k & SSL_kPSK) {
         unsigned char *t = NULL;
         unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN * 2 + 4];
@@ -2849,6 +2900,235 @@ int ssl3_get_client_key_exchange(SSL *s)
         p += i;
     } else
 #endif                          /* OPENSSL_NO_SRP */
+#ifndef OPENSSL_NO_RSA
+#ifndef OPENSSL_NO_PSK
+    /** This handles RSA-PSK ClientKeyExchange **/
+   if (alg_k & SSL_kRSAPSK)
+       {
+        unsigned char *t = NULL;
+        /* orig_p points to the initial value of p and is required 
+         * for a call to OPENSSL_cleanse at the end. don't touch! */
+        unsigned char *orig_p = p;
+        unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
+        unsigned int pre_ms_len = 0, psk_len = 0;
+        char tmp_id[PSK_MAX_IDENTITY_LEN+1]; // temp storage for the identity str
+        int b_consumed = 0; // counts the number of consumed bytes of CKE payload
+        int epms_len = 0; // length of encrypted premaster secret
+        int psk_err = 1; // error flag for the RSAPSK branch
+
+        /**
+         * things defined elsewhere, but used here (CKE=ClientKeyExchange):
+         * n (probably) contains the CKE payload length 
+         * p points to the CKE payload **/
+
+       /* FIX THIS UP EAY EAY EAY EAY */
+       if (s->s3->tmp.use_rsa_tmp)
+           {
+           if ((s->cert != NULL) && (s->cert->rsa_tmp != NULL))
+               rsa=s->cert->rsa_tmp;
+           /* Don't do a callback because rsa_tmp should
+            * be sent already */
+           if (rsa == NULL)
+               {
+               al=SSL_AD_HANDSHAKE_FAILURE;
+               SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_MISSING_TMP_RSA_PKEY);
+               goto rsapsk_err;
+               }
+           }
+       else
+           {
+           pkey=s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey;
+           if (    (pkey == NULL) ||
+               (pkey->type != EVP_PKEY_RSA) ||
+               (pkey->pkey.rsa == NULL))
+               {
+               al=SSL_AD_HANDSHAKE_FAILURE;
+               SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_MISSING_RSA_CERTIFICATE);
+               goto rsapsk_err;
+               }
+           rsa=pkey->pkey.rsa;
+           }
+
+        /* In plain RSA key exchange, the ClientKeyExchange payload consists 
+         * of epms_len (2 bytes) and the encrypted premaster secret (>SSLv3).
+         *               [epms_len] [epms] 
+         * len in bytes       2        m     
+         *
+         * For RSAPSK it looks like so:
+         *               [id_len] [identity] [epms_len] [epms] 
+         * len in bytes     2         k          2        m     
+         *
+         * [epms], when decrypted, consists of:
+         *               [version] [random_by_client]
+         * len in bytes      2            46                             */
+        /* read and check id_len */
+        n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
+        b_consumed+=2; // increase the total num of CKE payload bytes read
+        if (i > PSK_MAX_IDENTITY_LEN)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                SSL_R_DATA_LENGTH_TOO_LONG);
+            goto rsapsk_err;
+            }
+        if (s->psk_server_callback == NULL)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_NO_SERVER_CB);
+            goto rsapsk_err;
+            }
+
+        /* read identity */
+        /* Create guaranteed NULL-terminated identity
+         * string for the callback */
+        memcpy(tmp_id, p, i);
+        p+=i; // make p point to after [identity]
+        b_consumed+=i;
+        // fill remaining space in tmp_id with zeroes
+        memset(tmp_id+i, 0, PSK_MAX_IDENTITY_LEN+1-i);
+        /* get the PSK via callback */
+        psk_len = s->psk_server_callback(s, tmp_id,
+            psk_or_pre_ms, sizeof(psk_or_pre_ms));
+        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
+
+        // psk_len error handling
+        if (psk_len > PSK_MAX_PSK_LEN)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                ERR_R_INTERNAL_ERROR);
+            goto rsapsk_err;
+            }
+        else if (psk_len == 0)
+            {
+            /* PSK related to the given identity not found */
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_IDENTITY_NOT_FOUND);
+            al=SSL_AD_UNKNOWN_PSK_IDENTITY;
+            goto rsapsk_err;
+            }
+
+        /** read epms_len and then read and decrypt epms **/
+        n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
+        epms_len=i;
+        /** 
+         * FIXME: add a check
+         *   epms_len     ==   (total_payload_len) - (payload_bytes_consumed)
+         *   epms_len  should equal   n - b_consumed                    **/
+        // decrypt  epms_len  bytes from p into p (the premaster secret)
+       i=RSA_private_decrypt(epms_len, p, p, 
+                rsa, RSA_PKCS1_PADDING);
+
+       al = -1;
+       
+       if (i != SSL_MAX_MASTER_KEY_LENGTH)
+           {
+           al=SSL_AD_DECODE_ERROR;
+           /* SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_DECRYPT); */
+           }
+
+        /** now check the version (first 2 bytes of the premaster secret) **/
+       if ((al == -1) && !((p[0] == (s->client_version>>8)) && (p[1] == (s->client_version & 0xff))))
+           {
+           /* The premaster secret must contain the same version number as the
+            * ClientHello to detect version rollback attacks (strangely, the
+            * protocol does not offer such protection for DH ciphersuites).
+            * However, buggy clients exist that send the negotiated protocol
+            * version instead if the server does not support the requested
+            * protocol version.
+            * If SSL_OP_TLS_ROLLBACK_BUG is set, tolerate such clients. */
+           if (!((s->options & SSL_OP_TLS_ROLLBACK_BUG) &&
+               (p[0] == (s->version>>8)) && (p[1] == (s->version & 0xff))))
+               {
+               al=SSL_AD_DECODE_ERROR;
+               /* SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_BAD_PROTOCOL_VERSION_NUMBER); */
+
+               /* The Klima-Pokorny-Rosa extension of Bleichenbacher's attack
+                * (http://eprint.iacr.org/2003/052/) exploits the version
+                * number check as a "bad version oracle" -- an alert would
+                * reveal that the plaintext corresponding to some ciphertext
+                * made up by the adversary is properly formatted except
+                * that the version number is wrong.  To avoid such attacks,
+                * we should treat this just like any other decryption error. */
+               }
+           }
+
+       if (al != -1)
+           {
+           /* Some decryption failure -- use random value instead as countermeasure
+            * against Bleichenbacher's attack on PKCS #1 v1.5 RSA padding
+            * (see RFC 2246, section 7.4.7.1). */
+           ERR_clear_error();
+           i = SSL_MAX_MASTER_KEY_LENGTH;
+           p[0] = s->client_version >> 8;
+           p[1] = s->client_version & 0xff;
+           if (RAND_pseudo_bytes(p+2, i-2) <= 0) /* should be RAND_bytes, but we cannot work around a failure */
+               goto rsapsk_err; // CHECKME CD: goto target correctly adapted? was err
+           }
+   
+        /* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
+         *
+         * // currently the psk is at the beginning of psk_or_pre_ms
+         * psk_or_pre_ms = [psk]....
+         *
+         * N = len(psk) in octets
+         *          [A]     [B1]     [B2]     [C]    [D]
+         * pre_ms = 48 +  version + random +   N  +  psk
+         *          2b +     2b   +   46b  +  2b  +  N bytes */
+        pre_ms_len=2+2+46+2+psk_len;
+        // initialize t at beginning of psk_or_pre_ms, then increase it as necessary
+        t = psk_or_pre_ms;
+        // move the PSK from the beginning to the end   [D]
+        memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
+        // prefix (48 as uint16)  [A]
+        unsigned int pmsprefix = 48;
+        s2n(pmsprefix, t);   // write 48 into t, automatically increases t
+        // copy version [B1] and random [B2] (48 bytes) from p into t
+        memcpy(t, p, 48);
+        t+=48;
+        // write psk_len into t   [C]
+        s2n(psk_len, t);
+        // at this point psk_or_pre_ms is filled with the premaster secret
+
+        if (s->session->psk_identity != NULL)
+            OPENSSL_free(s->session->psk_identity);
+        /* in the plain PSK case, the following line copies the identity
+         * from the payload into the session. must be adapted for the
+         * RSAPSK case. */
+        //s->session->psk_identity = BUF_strdup((char *)p);
+        // CHECKME CD: is this correctly adapted? CD
+        s->session->psk_identity = BUF_strdup(tmp_id);
+        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
+        if (s->session->psk_identity == NULL)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                ERR_R_MALLOC_FAILURE);
+            goto rsapsk_err;
+            }
+
+        if (s->session->psk_identity_hint != NULL)
+            OPENSSL_free(s->session->psk_identity_hint);
+        s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+        if (s->ctx->psk_identity_hint != NULL &&
+            s->session->psk_identity_hint == NULL)
+            {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                ERR_R_MALLOC_FAILURE);
+            goto rsapsk_err;
+            }
+
+        s->session->master_key_length=
+            s->method->ssl3_enc->generate_master_secret(s,
+                s->session->master_key, psk_or_pre_ms, pre_ms_len);
+        psk_err = 0;
+       //FIXME OPENSSL_cleanse(p,i); // this came from the plain RSA case and cleans the 48 bytes decrypted premaster secret
+        OPENSSL_cleanse(orig_p, n); // clear the whole payload area
+    rsapsk_err: // this label has been renamed from psk_err ro rsapsk_err
+        OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
+        if (psk_err != 0)
+            goto f_err;
+        }
+    else
+#endif /* !OPENSSL_NO_PSK */
+#endif /* !OPENSSL_NO_RSA */
     if (alg_k & SSL_kGOST) {
         int ret = 0;
         EVP_PKEY_CTX *pkey_ctx;
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl_ciph.c OpenSSL_1_0_2-stable_patched/ssl/ssl_ciph.c
--- OpenSSL_1_0_2-stable/ssl/ssl_ciph.c	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/ssl_ciph.c	2015-08-18 16:56:42.161239477 +0200
@@ -265,6 +265,7 @@ static const SSL_CIPHER cipher_aliases[]
 
     {0, SSL_TXT_kPSK, 0, SSL_kPSK, 0, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_kSRP, 0, SSL_kSRP, 0, 0, 0, 0, 0, 0, 0, 0},
+    {0,SSL_TXT_kRSAPSK,0, SSL_kRSAPSK,  0,0,0,0,0,0,0,0},
     {0, SSL_TXT_kGOST, 0, SSL_kGOST, 0, 0, 0, 0, 0, 0, 0, 0},
 
     /* server authentication aliases */
@@ -278,7 +279,7 @@ static const SSL_CIPHER cipher_aliases[]
     {0, SSL_TXT_aECDH, 0, 0, SSL_aECDH, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_aECDSA, 0, 0, SSL_aECDSA, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_ECDSA, 0, 0, SSL_aECDSA, 0, 0, 0, 0, 0, 0, 0},
-    {0, SSL_TXT_aPSK, 0, 0, SSL_aPSK, 0, 0, 0, 0, 0, 0, 0},
+    {0,SSL_TXT_aPSK,0,    0,SSL_aPSK,  0,0,0,0,0,0,0},
     {0, SSL_TXT_aGOST94, 0, 0, SSL_aGOST94, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_aGOST01, 0, 0, SSL_aGOST01, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_aGOST, 0, 0, SSL_aGOST94 | SSL_aGOST01, 0, 0, 0, 0, 0, 0, 0},
@@ -295,6 +296,7 @@ static const SSL_CIPHER cipher_aliases[]
     {0, SSL_TXT_ADH, 0, SSL_kEDH, SSL_aNULL, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_AECDH, 0, SSL_kEECDH, SSL_aNULL, 0, 0, 0, 0, 0, 0, 0},
     {0, SSL_TXT_PSK, 0, SSL_kPSK, SSL_aPSK, 0, 0, 0, 0, 0, 0, 0},
+    {0,SSL_TXT_RSAPSK,0,  SSL_kRSAPSK,SSL_aRSA,0,0,0,0,0,0,0},
     {0, SSL_TXT_SRP, 0, SSL_kSRP, 0, 0, 0, 0, 0, 0, 0, 0},
 
     /* symmetric encryption aliases */
@@ -754,7 +756,7 @@ static void ssl_cipher_get_disabled(unsi
     *auth |= SSL_aECDH;
 #endif
 #ifdef OPENSSL_NO_PSK
-    *mkey |= SSL_kPSK;
+    *mkey |= SSL_kPSK|SSL_kRSAPSK;
     *auth |= SSL_aPSK;
 #endif
 #ifdef OPENSSL_NO_SRP
@@ -1551,6 +1553,9 @@ STACK_OF(SSL_CIPHER) *ssl_create_cipher_
      */
     ssl_cipher_apply_rule(0, SSL_kRSA, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
                           &tail);
+    // CHECKME CD: RSAPSK comes before plain PSK
+    ssl_cipher_apply_rule(0, SSL_kRSAPSK, 0,0, 0, 0, 0, CIPHER_ORD, -1, &head, 
+                          &tail);
     ssl_cipher_apply_rule(0, SSL_kPSK, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
                           &tail);
     ssl_cipher_apply_rule(0, SSL_kKRB5, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
@@ -1727,6 +1732,9 @@ char *SSL_CIPHER_description(const SSL_C
     case SSL_kPSK:
         kx = "PSK";
         break;
+    case SSL_kRSAPSK:
+       kx="RSAPSK";
+       break;
     case SSL_kSRP:
         kx = "SRP";
         break;
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl.h OpenSSL_1_0_2-stable_patched/ssl/ssl.h
--- OpenSSL_1_0_2-stable/ssl/ssl.h	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/ssl.h	2015-08-18 16:46:02.455174719 +0200
@@ -254,6 +254,7 @@ extern "C" {
 # define SSL_TXT_kEECDH          "kEECDH"
 # define SSL_TXT_kECDHE          "kECDHE"/* alias for kEECDH */
 # define SSL_TXT_kPSK            "kPSK"
+# define SSL_TXT_kRSAPSK            "kRSAPSK"
 # define SSL_TXT_kGOST           "kGOST"
 # define SSL_TXT_kSRP            "kSRP"
 
@@ -282,6 +283,7 @@ extern "C" {
 # define SSL_TXT_ECDSA           "ECDSA"
 # define SSL_TXT_KRB5            "KRB5"
 # define SSL_TXT_PSK             "PSK"
+# define SSL_TXT_RSAPSK             "RSAPSK"
 # define SSL_TXT_SRP             "SRP"
 
 # define SSL_TXT_DES             "DES"
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl_lib.c OpenSSL_1_0_2-stable_patched/ssl/ssl_lib.c
--- OpenSSL_1_0_2-stable/ssl/ssl_lib.c	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/ssl_lib.c	2015-08-18 16:51:38.644677790 +0200
@@ -1450,10 +1450,24 @@ int ssl_cipher_list_to_bytes(SSL *s, STA
 
     for (i = 0; i < sk_SSL_CIPHER_num(sk); i++) {
         c = sk_SSL_CIPHER_value(sk, i);
+
         /* Skip disabled ciphers */
         if (c->algorithm_ssl & ct->mask_ssl ||
             c->algorithm_mkey & ct->mask_k || c->algorithm_auth & ct->mask_a)
             continue;
+
+#ifndef OPENSSL_NO_KRB5
+       if (((c->algorithm_mkey & SSL_kKRB5) || (c->algorithm_auth & SSL_aKRB5)) &&
+           nokrb5)
+           continue;
+#endif /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+       /* with PSK there must be client callback set */
+       if (((c->algorithm_mkey & (SSL_kPSK|SSL_kRSAPSK)) 
+           || (c->algorithm_auth & SSL_aPSK)) &&
+           s->psk_client_callback == NULL)
+           continue;
+#endif       
 #ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL
         if (c->id == SSL3_CK_SCSV) {
             if (!empty_reneg_info_scsv)
@@ -2418,8 +2432,10 @@ void ssl_set_cert_masks(CERT *c, const S
 
 #ifndef OPENSSL_NO_PSK
     mask_k |= SSL_kPSK;
+    mask_k |= SSL_kRSAPSK;   // CJD
     mask_a |= SSL_aPSK;
     emask_k |= SSL_kPSK;
+    emask_k |= SSL_kRSAPSK;  // CJD
     emask_a |= SSL_aPSK;
 #endif
 
diff -rupN OpenSSL_1_0_2-stable/ssl/ssl_locl.h OpenSSL_1_0_2-stable_patched/ssl/ssl_locl.h
--- OpenSSL_1_0_2-stable/ssl/ssl_locl.h	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/ssl_locl.h	2015-08-18 16:47:04.837081492 +0200
@@ -314,6 +314,8 @@
 # define SSL_kGOST       0x00000200L
 /* SRP */
 # define SSL_kSRP        0x00000400L
+ /* RSA-PSK */
+# define SSL_kRSAPSK        0x00000800L 
 
 /* Bits for algorithm_auth (server authentication) */
 /* RSA auth */
diff -rupN OpenSSL_1_0_2-stable/ssl/tls1.h OpenSSL_1_0_2-stable_patched/ssl/tls1.h
--- OpenSSL_1_0_2-stable/ssl/tls1.h	2015-08-18 16:32:46.000000000 +0200
+++ OpenSSL_1_0_2-stable_patched/ssl/tls1.h	2015-08-18 16:41:30.103566739 +0200
@@ -411,6 +411,9 @@ SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_T
 # define TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA               0x0300008B
 # define TLS1_CK_PSK_WITH_AES_128_CBC_SHA                0x0300008C
 # define TLS1_CK_PSK_WITH_AES_256_CBC_SHA                0x0300008D
+/* RSA-PSK */
+// FIXME: add RSA-PSK ciphers 92-94 here, too
+#define TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA            0x03000095
 
 /*
  * Additional TLS ciphersuites from expired Internet Draft
@@ -631,6 +634,8 @@ SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_T
 # define TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA              "PSK-3DES-EDE-CBC-SHA"
 # define TLS1_TXT_PSK_WITH_AES_128_CBC_SHA               "PSK-AES128-CBC-SHA"
 # define TLS1_TXT_PSK_WITH_AES_256_CBC_SHA               "PSK-AES256-CBC-SHA"
+ // FIXME: add the 3 other RSA-PSK ciphers here, too
+#define TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA    "RSA-PSK-AES256-CBC-SHA"
 
 /* SRP ciphersuite from RFC 5054 */
 # define TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA          "SRP-3DES-EDE-CBC-SHA"
