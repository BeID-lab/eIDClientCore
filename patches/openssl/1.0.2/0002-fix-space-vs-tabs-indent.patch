From c14517181810561bab304ea0ed6ad7eeefde58ec Mon Sep 17 00:00:00 2001
From: Michael Gehring <mg@ebfe.org>
Date: Fri, 2 Aug 2013 14:32:36 +0200
Subject: [PATCH 2/3] fix space vs tabs indent

Patch adjusted by Erik Nellessen: erik.nellessen@informatik.hu-berlin.de
---
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_clnt.c OpenSSL_1_0_2-stable-patched/ssl/s3_clnt.c
--- OpenSSL_1_0_2-stable/ssl/s3_clnt.c	2014-08-19 11:42:59.429902074 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/s3_clnt.c	2014-08-19 11:43:47.029900089 +0200
@@ -1461,7 +1461,7 @@ int ssl3_get_key_exchange(SSL *s)
 	EVP_MD_CTX_init(&md_ctx);
 
 #ifndef OPENSSL_NO_PSK
-    /* handle PSK identity hint */
+	/* handle PSK identity hint */
 	if (alg_k & (SSL_kPSK|SSL_kRSAPSK)) // CJD
 		{
 		char tmp_id_hint[PSK_MAX_IDENTITY_LEN+1];
@@ -2419,33 +2419,33 @@ int ssl3_send_client_key_exchange(SSL *s
 				EVP_PKEY_free(pkey);
 				}
 			
-            /* build the pre master secret in tmp_buf:
-             * [client_version|2b] [len_rand|2b] [rand|46b] =: pms
-             * encrypted_pms = RSA_public_encrypt(pms)
-             * [len_epms|2b] [encrypted_pms]   */
-            /* two bytes version */
+			/* build the pre master secret in tmp_buf:
+			 * [client_version|2b] [len_rand|2b] [rand|46b] =: pms
+			 * encrypted_pms = RSA_public_encrypt(pms)
+			 * [len_epms|2b] [encrypted_pms]   */
+			/* two bytes version */
 			tmp_buf[0]=s->client_version>>8;
 			tmp_buf[1]=s->client_version&0xff;
-            /* 46 random bytes */
+			/* 46 random bytes */
 			if (RAND_bytes(&(tmp_buf[2]),sizeof tmp_buf-2) <= 0)
 					goto err;
 
-            /* assume premaster secret and master secret have same length */
+			/* assume premaster secret and master secret have same length */
 			s->session->master_key_length=sizeof tmp_buf;
 
-            /* q now points to the send buffer (where p was pointing) */
+			/* q now points to the send buffer (where p was pointing) */
 			q=p;
 			/* Fix buf for TLS and beyond. Before writing to p, skip 2 bytes
-             * which are supposed to specify the length of the encrypted pms.
-             * This is only needed for certain versions >= TLS 1.0 */
+			 * which are supposed to specify the length of the encrypted pms.
+			 * This is only needed for certain versions >= TLS 1.0 */
 			if (s->version > SSL3_VERSION)
 				p+=2;
-            /*
-             *   int RSA_public_encrypt(int flen, unsigned char *from,
-             *       unsigned char *to, RSA *rsa, int padding);
-             * encrypt from tmp_buf into p using the key in rsa */
+			/*
+			 *   int RSA_public_encrypt(int flen, unsigned char *from,
+			 *	   unsigned char *to, RSA *rsa, int padding);
+			 * encrypt from tmp_buf into p using the key in rsa */
 			n=RSA_public_encrypt(sizeof tmp_buf, tmp_buf,
-                p, rsa, RSA_PKCS1_PADDING);
+				p, rsa, RSA_PKCS1_PADDING);
 #ifdef PKCS1_CHECK
 			if (s->options & SSL_OP_PKCS1_CHECK_1) p[1]++;          // ???
 			if (s->options & SSL_OP_PKCS1_CHECK_2) tmp_buf[0]=0x70; // ???
@@ -3024,20 +3024,20 @@ int ssl3_send_client_key_exchange(SSL *s
 			}
 #endif
 #ifndef OPENSSL_NO_PSK
-        /** plain PSK case **/
+		/** plain PSK case **/
 		else if (alg_k & SSL_kPSK)
 			{
 			char identity[PSK_MAX_IDENTITY_LEN];
 			unsigned char *t = NULL;
-            /*
-             * plain PSK case:
-             *   N = len(psk) in octets
-             *   pre_ms = N + N*'0' + N + psk 
-             * RSA-PSK case:
-             *   uint16 prefix = 48
-             *   pre_ms = prefix + epms + psk_len + psk
-             *              2b      ?b      2b      ?b
-             */
+			/*
+			 * plain PSK case:
+			 *   N = len(psk) in octets
+			 *   pre_ms = N + N*'0' + N + psk 
+			 * RSA-PSK case:
+			 *   uint16 prefix = 48
+			 *   pre_ms = prefix + epms + psk_len + psk
+			 *			  2b	  ?b	  2b	  ?b
+			 */
 			unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
 			unsigned int pre_ms_len = 0, psk_len = 0;
 			int psk_err = 1;
@@ -3050,8 +3050,8 @@ int ssl3_send_client_key_exchange(SSL *s
 				goto err;
 				}
 
-            /* fills psk_len, identity and psk_or_pre_ms */
-            /* psk_or_pre_ms is filled with the psk at the beginning */
+			/* fills psk_len, identity and psk_or_pre_ms */
+			/* psk_or_pre_ms is filled with the psk at the beginning */
 			psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,
 				identity, PSK_MAX_IDENTITY_LEN,
 				psk_or_pre_ms, sizeof(psk_or_pre_ms));
@@ -3069,24 +3069,24 @@ int ssl3_send_client_key_exchange(SSL *s
 				}
 
 			/* create PSK pre_master_secret, it should look like pre_ms at the end
-             *
-             * // currently the psk is at the beginning of psk_or_pre_ms
-             * psk_or_pre_ms = [psk]....
-             *
-             * N = len(psk) in octets
-             *          [A]    [B]      [C]    [D]
-             * pre_ms =  N +  N*'0'  +   N  +  psk
-             *          2b +  N byt  +  2b  +  N bytes */
+			 *
+			 * // currently the psk is at the beginning of psk_or_pre_ms
+			 * psk_or_pre_ms = [psk]....
+			 *
+			 * N = len(psk) in octets
+			 *		  [A]	[B]	  [C]	[D]
+			 * pre_ms =  N +  N*'0'  +   N  +  psk
+			 *		  2b +  N byt  +  2b  +  N bytes */
 			pre_ms_len = 2+psk_len+2+psk_len;
 			t = psk_or_pre_ms;
-            /* copy the psk to 4 bytes after the first psk (fills [D]) */
+			/* copy the psk to 4 bytes after the first psk (fills [D]) */
 			memmove(psk_or_pre_ms+psk_len+4, psk_or_pre_ms, psk_len);
 			// write psk_len as uint16 (2 bytes) into the first 2 bytes of t, increase t
 			s2n(psk_len, t);
 			memset(t, 0, psk_len); // write psk_len zeroes into t
 			t+=psk_len; // increase t by psk_len
 			s2n(psk_len, t);    // write psk_len as uint16 into t
-            // at this point, psk_or_pre_ms is filled with all required values
+			// at this point, psk_or_pre_ms is filled with all required values
 
 			if (s->session->psk_identity_hint != NULL)
 				OPENSSL_free(s->session->psk_identity_hint);
@@ -3109,15 +3109,15 @@ int ssl3_send_client_key_exchange(SSL *s
 				goto psk_err;
 				}
 
-            /* generate the master secret based on premaster secret in psk_or_pre_ms */
+			/* generate the master secret based on premaster secret in psk_or_pre_ms */
 			s->session->master_key_length =
 				s->method->ssl3_enc->generate_master_secret(s,
 					s->session->master_key,
 					psk_or_pre_ms, pre_ms_len); 
-            /* now build the ClientKeyExchange message
-             * which consists of the psk_identity encoded as opaque */
-            /* I think n must contain the length of the whole ClientKeyExchange 
-             * message, thus update it accordingly! */
+			/* now build the ClientKeyExchange message
+			 * which consists of the psk_identity encoded as opaque */
+			/* I think n must contain the length of the whole ClientKeyExchange 
+			 * message, thus update it accordingly! */
 			n = strlen(identity);
 			s2n(n, p); // write n as uint16 into p
 			memcpy(p, identity, n); // copy identity into p
@@ -3135,16 +3135,16 @@ int ssl3_send_client_key_exchange(SSL *s
 #endif
 #ifndef OPENSSL_NO_PSK
 #ifndef OPENSSL_NO_RSA
-        /** RSA-PSK case **/
+		/** RSA-PSK case **/
 		else if (alg_k & SSL_kRSAPSK)        // CJD
 			{
 			char identity[PSK_MAX_IDENTITY_LEN];
 			unsigned char *t = NULL;            // temp
-            /* stores the premaster secret */
+			/* stores the premaster secret */
 			unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
 			unsigned int pre_ms_len = 0, psk_len = 0;
-            RSA *rsa;
-            int enc_n; // contains number of encrypted bytes after RSA encryption
+			RSA *rsa;
+			int enc_n; // contains number of encrypted bytes after RSA encryption
 			int psk_err = 1;
 
 			n = 0;
@@ -3172,35 +3172,35 @@ int ssl3_send_client_key_exchange(SSL *s
 				}
 
 			/* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
-             *
-             * // currently the psk is at the beginning of psk_or_pre_ms
-             * psk_or_pre_ms = [psk]....
-             *
-             * N = len(psk) in octets
-             *          [A]     [B1]     [B2]     [C]    [D]
-             * pre_ms = 48 +  version + random +   N  +  psk
-             *          2b +     2b   +   46b  +  2b  +  N bytes */
+			 *
+			 * // currently the psk is at the beginning of psk_or_pre_ms
+			 * psk_or_pre_ms = [psk]....
+			 *
+			 * N = len(psk) in octets
+			 *		  [A]	 [B1]	 [B2]	 [C]	[D]
+			 * pre_ms = 48 +  version + random +   N  +  psk
+			 *		  2b +	 2b   +   46b  +  2b  +  N bytes */
 			pre_ms_len = 2+2+46+2+psk_len;
 			// initialize t at beginning of psk_or_pre_ms, then increase it as necessary
 			t = psk_or_pre_ms;
-            // move the PSK from the beginning to the end   [D]
+			// move the PSK from the beginning to the end   [D]
 			memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
-            // prefix (48 as uint16)  [A]
-            unsigned int pmsprefix = 48;
-            s2n(pmsprefix, t);   // write 48 into t, automatically increases t
-            // client version [B1]
-            psk_or_pre_ms[2]=s->client_version>>8;
-            psk_or_pre_ms[3]=s->client_version&0xff;
-            t+=2;
-            // 46 random bytes [B2]
-            if (RAND_bytes(&(psk_or_pre_ms[4]),46) <= 0)
-                    goto err;
-            t+=46;  // increase t by the length of the random bytes
-            // write psk_len into t    [C]
+			// prefix (48 as uint16)  [A]
+			unsigned int pmsprefix = 48;
+			s2n(pmsprefix, t);   // write 48 into t, automatically increases t
+			// client version [B1]
+			psk_or_pre_ms[2]=s->client_version>>8;
+			psk_or_pre_ms[3]=s->client_version&0xff;
+			t+=2;
+			// 46 random bytes [B2]
+			if (RAND_bytes(&(psk_or_pre_ms[4]),46) <= 0)
+					goto err;
+			t+=46;  // increase t by the length of the random bytes
+			// write psk_len into t	[C]
 			s2n(psk_len, t); // write psk_len as uint16 into t, increasing t
-            // at this point psk_or_pre_ms is filled with the premaster secret
+			// at this point psk_or_pre_ms is filled with the premaster secret
 
-            /* copy psk_identity_hint from context into the session */
+			/* copy psk_identity_hint from context into the session */
 			if (s->session->psk_identity_hint != NULL)
 				OPENSSL_free(s->session->psk_identity_hint);
 			s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
@@ -3212,7 +3212,7 @@ int ssl3_send_client_key_exchange(SSL *s
 				goto rsapsk_err;
 				}
 
-            /* store the psk_identity in the session */
+			/* store the psk_identity in the session */
 			if (s->session->psk_identity != NULL)
 				OPENSSL_free(s->session->psk_identity);
 			s->session->psk_identity = BUF_strdup(identity);
@@ -3228,22 +3228,22 @@ int ssl3_send_client_key_exchange(SSL *s
 					s->session->master_key,
 					psk_or_pre_ms, pre_ms_len); 
 
-            /* now build ClientKeyExchange payload which consists of
-             * psk_identity and the encrypted pre_ms, encoded like so:
-             *              [id_len] [identity] [epms_len] [epms]    
-             * len in bytes    2         k          2        m      */
-            /* get the rsa object which has the server's public key */
+			/* now build ClientKeyExchange payload which consists of
+			 * psk_identity and the encrypted pre_ms, encoded like so:
+			 *			  [id_len] [identity] [epms_len] [epms]	
+			 * len in bytes	2		 k		  2		m	  */
+			/* get the rsa object which has the server's public key */
 			if (s->session->sess_cert->peer_rsa_tmp != NULL)
-                /* for this session the server's rsa has been extracted */
+				/* for this session the server's rsa has been extracted */
 				rsa=s->session->sess_cert->peer_rsa_tmp;
 			else
 				{
-                /* get the pubkey from the server's certificate */
+				/* get the pubkey from the server's certificate */
 				pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
-                // FIXME CJD: do we need to check pkey->type for RSAPSK here?
-				if ((pkey == NULL) ||                 // pubkey is NULL
+				// FIXME CJD: do we need to check pkey->type for RSAPSK here?
+				if ((pkey == NULL) ||				 // pubkey is NULL
 					(pkey->type != EVP_PKEY_RSA) ||   // pubkey cannot be used for RSA
-					(pkey->pkey.rsa == NULL))         // pubkey's rsa obj is NULL
+					(pkey->pkey.rsa == NULL))		 // pubkey's rsa obj is NULL
 					{
 					SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,ERR_R_INTERNAL_ERROR);
 					goto err; // FIXME CJD: check target, maybe rsapsk_err?
@@ -3252,35 +3252,35 @@ int ssl3_send_client_key_exchange(SSL *s
 				EVP_PKEY_free(pkey);
 				}
 
-            t=p;
-            /* n must finally contain the length of the 
-             * whole ClientKeyExchange payload, thus update it accordingly! */
+			t=p;
+			/* n must finally contain the length of the 
+			 * whole ClientKeyExchange payload, thus update it accordingly! */
 			n = strlen(identity);
-			s2n(n, t);              // write n as uint16 into t, increasing t (t=p+2)
+			s2n(n, t);			  // write n as uint16 into t, increasing t (t=p+2)
 			memcpy(t, identity, n); // copy identity into t (n bytes long)
-            t+=n; // t = p+2+n
+			t+=n; // t = p+2+n
 			/* increase n by 2 as the length of identity was written before */
 			n+=2; // n now covers [id_len] and [identity]
 
-            /* write encrypted pre_ms into t, leaving space 
-             * for the length before (2 bytes) therefore t+2 */
-            // encrypt 48 bytes from psk_or_pre_ms into t
-            enc_n=RSA_public_encrypt(48, &(psk_or_pre_ms[2]), 
-                t+2, rsa, RSA_PKCS1_PADDING);
-            if (enc_n <= 0)
-                {
-                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_ENCRYPT);
-                goto err;
-                }
-            n+=enc_n;
-            s2n(enc_n, t); // write the length of the encrypted pms in front of epms
-            n+=2; // add the 2 bytes that are needed for [epms_len]
-            
-            /* Fix buf for TLS and beyond */
-            // NOT NEEDED
-            
+			/* write encrypted pre_ms into t, leaving space 
+			 * for the length before (2 bytes) therefore t+2 */
+			// encrypt 48 bytes from psk_or_pre_ms into t
+			enc_n=RSA_public_encrypt(48, &(psk_or_pre_ms[2]), 
+				t+2, rsa, RSA_PKCS1_PADDING);
+			if (enc_n <= 0)
+				{
+				SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_ENCRYPT);
+				goto err;
+				}
+			n+=enc_n;
+			s2n(enc_n, t); // write the length of the encrypted pms in front of epms
+			n+=2; // add the 2 bytes that are needed for [epms_len]
+			
+			/* Fix buf for TLS and beyond */
+			// NOT NEEDED
+			
 			psk_err = 0;
-		rsapsk_err:
+			rsapsk_err:
 			OPENSSL_cleanse(identity, PSK_MAX_IDENTITY_LEN);
 			OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
 			if (psk_err != 0)
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_lib.c OpenSSL_1_0_2-stable-patched/ssl/s3_lib.c
--- OpenSSL_1_0_2-stable/ssl/s3_lib.c	2014-08-19 11:42:59.430902074 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/s3_lib.c	2014-08-19 11:43:47.030900089 +0200
@@ -1717,8 +1717,8 @@ OPENSSL_GLOBAL const SSL_CIPHER ssl3_cip
 	},
 
 #ifndef OPENSSL_NO_RSA
-    /** RSA-PSK ciphersuites **/
-    // FIXME: add RSA-PSK ciphers 92-94
+	/** RSA-PSK ciphersuites **/
+	// FIXME: add RSA-PSK ciphers 92-94
 
 	/* Cipher 95 */
 	{
diff -rupN OpenSSL_1_0_2-stable/ssl/s3_srvr.c OpenSSL_1_0_2-stable-patched/ssl/s3_srvr.c
--- OpenSSL_1_0_2-stable/ssl/s3_srvr.c	2014-08-19 11:42:59.431902073 +0200
+++ OpenSSL_1_0_2-stable-patched/ssl/s3_srvr.c	2014-08-19 11:43:47.031900089 +0200
@@ -467,7 +467,7 @@ int ssl3_accept(SSL *s)
 			 * RSA but we have a sign only certificate
 			 *
 			 * PSK|RSAPSK: may send PSK identity hints.
-             *   Send ServerKeyExchange if PSK identity hint is provided.
+			 *   Send ServerKeyExchange if PSK identity hint is provided.
 			 *
 			 * For ECC ciphersuites, we send a serverKeyExchange
 			 * message only if the cipher suite is either
@@ -477,7 +477,7 @@ int ssl3_accept(SSL *s)
 			 */
 			if (s->s3->tmp.use_rsa_tmp
 #ifndef OPENSSL_NO_PSK
-                /* send ServKeyExch if PSK identity hint is provided */
+			    /* send ServKeyExch if PSK identity hint is provided */
 			    || ((alg_k & (SSL_kPSK|SSL_kRSAPSK)) && s->ctx->psk_identity_hint)
 #endif
 #ifndef OPENSSL_NO_SRP
@@ -1632,7 +1632,7 @@ int ssl3_send_server_key_exchange(SSL *s
 		r[0]=r[1]=r[2]=r[3]=NULL;
 		n=0;
 #ifndef OPENSSL_NO_RSA
-        /** plain RSA case for ServerKeyExchange **/
+		/** plain RSA case for ServerKeyExchange **/
 		if (type & SSL_kRSA)
 			{
 			rsa=cert->rsa_tmp;
@@ -1900,13 +1900,13 @@ int ssl3_send_server_key_exchange(SSL *s
 #endif
 #ifndef OPENSSL_NO_RSA
 #ifndef OPENSSL_NO_PSK
-        /** RSAPSK case for ServerKeyExchange **/
+		/** RSAPSK case for ServerKeyExchange **/
 		if (type & SSL_kRSAPSK) // CJD
 			{
-            /* RSA part */
-            /** NOTE: Using temporary RSA keys with RSAPSK does not make sense.
-             * We should probably remove the temp RSA key part from RSAPSK case. */
-            /*
+			/* RSA part */
+			/** NOTE: Using temporary RSA keys with RSAPSK does not make sense.
+			 * We should probably remove the temp RSA key part from RSAPSK case. */
+			/*
 			rsa=cert->rsa_tmp;
 			if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL))
 				{
@@ -1931,9 +1931,9 @@ int ssl3_send_server_key_exchange(SSL *s
 			r[0]=rsa->n;
 			r[1]=rsa->e;
 			s->s3->tmp.use_rsa_tmp=1;
-            */
-            /* PSK part */
-		    /* reserve size for record length and PSK identity hint */
+			*/
+			/* PSK part */
+			/* reserve size for record length and PSK identity hint */
 			n+=2+strlen(s->ctx->psk_identity_hint);
 			}
 		else
@@ -1957,8 +1957,8 @@ int ssl3_send_server_key_exchange(SSL *s
 
 		if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP))
 			&& !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
-            /* CJD: no change needed for RSAPSK. we need the pkey 
-             * in case of RSAPSK. */
+			/* CJD: no change needed for RSAPSK. we need the pkey 
+			 * in case of RSAPSK. */
 			{
 			if ((pkey=ssl_get_sign_pkey(s,s->s3->tmp.new_cipher,&md))
 				== NULL)
@@ -2040,7 +2040,7 @@ int ssl3_send_server_key_exchange(SSL *s
 #ifndef OPENSSL_NO_RSA
 			if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s))
 				{
-                if(!(type & SSL_kRSAPSK)) {
+				if(!(type & SSL_kRSAPSK)) {
 				q=md_buf;
 				j=0;
 				for (num=2; num > 0; num--)
@@ -2269,7 +2269,7 @@ int ssl3_get_client_key_exchange(SSL *s)
 	alg_k=s->s3->tmp.new_cipher->algorithm_mkey;
 
 #ifndef OPENSSL_NO_RSA
-    /** plain RSA case for ClientKeyExchange **/
+	/** plain RSA case for ClientKeyExchange **/
 	if (alg_k & SSL_kRSA)
 		{
 		unsigned char rand_premaster_secret[SSL_MAX_MASTER_KEY_LENGTH];
@@ -2309,8 +2309,8 @@ int ssl3_get_client_key_exchange(SSL *s)
 		if (s->version > SSL3_VERSION && s->version != DTLS1_BAD_VER)
 			{
 			n2s(p,i);   // read uint16 from p into i, increases p by 2
-            /* guess: n contains message length
-             * compare n with the specified length in i */
+			/* guess: n contains message length
+			 * compare n with the specified length in i */
 			if (n != i+2)
 				{
 				if (!(s->options & SSL_OP_TLS_D5_BUG))
@@ -2870,7 +2870,7 @@ int ssl3_get_client_key_exchange(SSL *s)
 	else
 #endif
 #ifndef OPENSSL_NO_PSK
-        /** plain PSK case **/
+		/** plain PSK case **/
 		if (alg_k & SSL_kPSK)
 			{
 			unsigned char *t = NULL;
@@ -3012,24 +3012,24 @@ int ssl3_get_client_key_exchange(SSL *s)
 #endif	/* OPENSSL_NO_SRP */
 #ifndef OPENSSL_NO_RSA
 #ifndef OPENSSL_NO_PSK
-    /** This handles RSA-PSK ClientKeyExchange **/
+	/** This handles RSA-PSK ClientKeyExchange **/
 	if (alg_k & SSL_kRSAPSK)
 		{
-        unsigned char *t = NULL;
-        /* orig_p points to the initial value of p and is required 
-         * for a call to OPENSSL_cleanse at the end. don't touch! */
-        unsigned char *orig_p = p;
-        unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
-        unsigned int pre_ms_len = 0, psk_len = 0;
-        char tmp_id[PSK_MAX_IDENTITY_LEN+1]; // temp storage for the identity str
-        int b_consumed = 0; // counts the number of consumed bytes of CKE payload
-        int epms_len = 0; // length of encrypted premaster secret
-        int psk_err = 1; // error flag for the RSAPSK branch
-
-        /**
-         * things defined elsewhere, but used here (CKE=ClientKeyExchange):
-         * n (probably) contains the CKE payload length 
-         * p points to the CKE payload **/
+		unsigned char *t = NULL;
+		/* orig_p points to the initial value of p and is required 
+		 * for a call to OPENSSL_cleanse at the end. don't touch! */
+		unsigned char *orig_p = p;
+		unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN*2+4];
+		unsigned int pre_ms_len = 0, psk_len = 0;
+		char tmp_id[PSK_MAX_IDENTITY_LEN+1]; // temp storage for the identity str
+		int b_consumed = 0; // counts the number of consumed bytes of CKE payload
+		int epms_len = 0; // length of encrypted premaster secret
+		int psk_err = 1; // error flag for the RSAPSK branch
+
+		/**
+		 * things defined elsewhere, but used here (CKE=ClientKeyExchange):
+		 * n (probably) contains the CKE payload length 
+		 * p points to the CKE payload **/
 
 		/* FIX THIS UP EAY EAY EAY EAY */
 		if (s->s3->tmp.use_rsa_tmp)
@@ -3059,73 +3059,73 @@ int ssl3_get_client_key_exchange(SSL *s)
 			rsa=pkey->pkey.rsa;
 			}
 
-        /* In plain RSA key exchange, the ClientKeyExchange payload consists 
-         * of epms_len (2 bytes) and the encrypted premaster secret (>SSLv3).
-         *               [epms_len] [epms] 
-         * len in bytes       2        m     
-         *
-         * For RSAPSK it looks like so:
-         *               [id_len] [identity] [epms_len] [epms] 
-         * len in bytes     2         k          2        m     
-         *
-         * [epms], when decrypted, consists of:
-         *               [version] [random_by_client]
-         * len in bytes      2            46                             */
-        /* read and check id_len */
-        n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
-        b_consumed+=2; // increase the total num of CKE payload bytes read
-        if (i > PSK_MAX_IDENTITY_LEN)
-            {
-            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
-                SSL_R_DATA_LENGTH_TOO_LONG);
-            goto rsapsk_err;
-            }
-        if (s->psk_server_callback == NULL)
-            {
-            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
-                   SSL_R_PSK_NO_SERVER_CB);
-            goto rsapsk_err;
-            }
-
-        /* read identity */
-        /* Create guaranteed NULL-terminated identity
-         * string for the callback */
-        memcpy(tmp_id, p, i);
-        p+=i; // make p point to after [identity]
-        b_consumed+=i;
-        // fill remaining space in tmp_id with zeroes
-        memset(tmp_id+i, 0, PSK_MAX_IDENTITY_LEN+1-i);
-        /* get the PSK via callback */
-        psk_len = s->psk_server_callback(s, tmp_id,
-            psk_or_pre_ms, sizeof(psk_or_pre_ms));
-        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
-
-        // psk_len error handling
-        if (psk_len > PSK_MAX_PSK_LEN)
-            {
-            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
-                ERR_R_INTERNAL_ERROR);
-            goto rsapsk_err;
-            }
-        else if (psk_len == 0)
-            {
-            /* PSK related to the given identity not found */
-            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
-                   SSL_R_PSK_IDENTITY_NOT_FOUND);
-            al=SSL_AD_UNKNOWN_PSK_IDENTITY;
-            goto rsapsk_err;
-            }
-
-        /** read epms_len and then read and decrypt epms **/
-        n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
-        epms_len=i;
-        /** 
-         * FIXME: add a check
-         *   epms_len     ==   (total_payload_len) - (payload_bytes_consumed)
-         *   epms_len  should equal   n - b_consumed                    **/
-        // decrypt  epms_len  bytes from p into p (the premaster secret)
+		/* In plain RSA key exchange, the ClientKeyExchange payload consists 
+		 * of epms_len (2 bytes) and the encrypted premaster secret (>SSLv3).
+		 *               [epms_len] [epms] 
+		 * len in bytes       2        m     
+		 *
+		 * For RSAPSK it looks like so:
+		 *               [id_len] [identity] [epms_len] [epms] 
+		 * len in bytes     2         k          2        m     
+		 *
+		 * [epms], when decrypted, consists of:
+		 *               [version] [random_by_client]
+		 * len in bytes      2            46                             */
+		/* read and check id_len */
+		n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
+		b_consumed+=2; // increase the total num of CKE payload bytes read
+		if (i > PSK_MAX_IDENTITY_LEN)
+			{
+			SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+				SSL_R_DATA_LENGTH_TOO_LONG);
+			goto rsapsk_err;
+			}
+		if (s->psk_server_callback == NULL)
+			{
+			SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+				   SSL_R_PSK_NO_SERVER_CB);
+			goto rsapsk_err;
+			}
+
+		/* read identity */
+		/* Create guaranteed NULL-terminated identity
+		 * string for the callback */
+		memcpy(tmp_id, p, i);
+		p+=i; // make p point to after [identity]
+		b_consumed+=i;
+		// fill remaining space in tmp_id with zeroes
+		memset(tmp_id+i, 0, PSK_MAX_IDENTITY_LEN+1-i);
+		/* get the PSK via callback */
+		psk_len = s->psk_server_callback(s, tmp_id,
+			psk_or_pre_ms, sizeof(psk_or_pre_ms));
+		OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
+
+		// psk_len error handling
+		if (psk_len > PSK_MAX_PSK_LEN)
+			{
+			SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+				ERR_R_INTERNAL_ERROR);
+			goto rsapsk_err;
+			}
+		else if (psk_len == 0)
+			{
+			/* PSK related to the given identity not found */
+			SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+				   SSL_R_PSK_IDENTITY_NOT_FOUND);
+			al=SSL_AD_UNKNOWN_PSK_IDENTITY;
+			goto rsapsk_err;
+			}
+
+		/** read epms_len and then read and decrypt epms **/
+		n2s(p,i); // read 2 bytes as uint16 from p into i, p+=2
+		epms_len=i;
+		/** 
+		 * FIXME: add a check
+		 *   epms_len     ==   (total_payload_len) - (payload_bytes_consumed)
+		 *   epms_len  should equal   n - b_consumed                    **/
+		// decrypt  epms_len  bytes from p into p (the premaster secret)
 		i=RSA_private_decrypt(epms_len, p, p, 
-                rsa, RSA_PKCS1_PADDING);
+				rsa, RSA_PKCS1_PADDING);
 
 		al = -1;
 		
@@ -3135,7 +3135,7 @@ int ssl3_get_client_key_exchange(SSL *s)
 			/* SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_BAD_RSA_DECRYPT); */
 			}
 
-        /** now check the version (first 2 bytes of the premaster secret) **/
+		/** now check the version (first 2 bytes of the premaster secret) **/
 		if ((al == -1) && !((p[0] == (s->client_version>>8)) && (p[1] == (s->client_version & 0xff))))
 			{
 			/* The premaster secret must contain the same version number as the
@@ -3174,69 +3174,69 @@ int ssl3_get_client_key_exchange(SSL *s)
 				goto rsapsk_err; // CHECKME CD: goto target correctly adapted? was err
 			}
 	
-        /* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
-         *
-         * // currently the psk is at the beginning of psk_or_pre_ms
-         * psk_or_pre_ms = [psk]....
-         *
-         * N = len(psk) in octets
-         *          [A]     [B1]     [B2]     [C]    [D]
-         * pre_ms = 48 +  version + random +   N  +  psk
-         *          2b +     2b   +   46b  +  2b  +  N bytes */
-        pre_ms_len=2+2+46+2+psk_len;
-        // initialize t at beginning of psk_or_pre_ms, then increase it as necessary
-        t = psk_or_pre_ms;
-        // move the PSK from the beginning to the end   [D]
-        memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
-        // prefix (48 as uint16)  [A]
-        unsigned int pmsprefix = 48;
-        s2n(pmsprefix, t);   // write 48 into t, automatically increases t
-        // copy version [B1] and random [B2] (48 bytes) from p into t
-        memcpy(t, p, 48);
-        t+=48;
-        // write psk_len into t   [C]
-        s2n(psk_len, t);
-        // at this point psk_or_pre_ms is filled with the premaster secret
-
-        if (s->session->psk_identity != NULL)
-            OPENSSL_free(s->session->psk_identity);
-        /* in the plain PSK case, the following line copies the identity
-         * from the payload into the session. must be adapted for the
-         * RSAPSK case. */
-        //s->session->psk_identity = BUF_strdup((char *)p);
-        // CHECKME CD: is this correctly adapted? CD
-        s->session->psk_identity = BUF_strdup(tmp_id);
-        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
-        if (s->session->psk_identity == NULL)
-            {
-            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
-                ERR_R_MALLOC_FAILURE);
-            goto rsapsk_err;
-            }
-
-        if (s->session->psk_identity_hint != NULL)
-            OPENSSL_free(s->session->psk_identity_hint);
-        s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
-        if (s->ctx->psk_identity_hint != NULL &&
-            s->session->psk_identity_hint == NULL)
-            {
-            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
-                ERR_R_MALLOC_FAILURE);
-            goto rsapsk_err;
-            }
-
-        s->session->master_key_length=
-            s->method->ssl3_enc->generate_master_secret(s,
-                s->session->master_key, psk_or_pre_ms, pre_ms_len);
-        psk_err = 0;
+		/* create RSA-PSK pre_master_secret, it should look like pre_ms at the end
+		 *
+		 * // currently the psk is at the beginning of psk_or_pre_ms
+		 * psk_or_pre_ms = [psk]....
+		 *
+		 * N = len(psk) in octets
+		 *          [A]     [B1]     [B2]     [C]    [D]
+		 * pre_ms = 48 +  version + random +   N  +  psk
+		 *          2b +     2b   +   46b  +  2b  +  N bytes */
+		pre_ms_len=2+2+46+2+psk_len;
+		// initialize t at beginning of psk_or_pre_ms, then increase it as necessary
+		t = psk_or_pre_ms;
+		// move the PSK from the beginning to the end   [D]
+		memmove(psk_or_pre_ms+52, psk_or_pre_ms, psk_len);
+		// prefix (48 as uint16)  [A]
+		unsigned int pmsprefix = 48;
+		s2n(pmsprefix, t);   // write 48 into t, automatically increases t
+		// copy version [B1] and random [B2] (48 bytes) from p into t
+		memcpy(t, p, 48);
+		t+=48;
+		// write psk_len into t   [C]
+		s2n(psk_len, t);
+		// at this point psk_or_pre_ms is filled with the premaster secret
+
+		if (s->session->psk_identity != NULL)
+			OPENSSL_free(s->session->psk_identity);
+		/* in the plain PSK case, the following line copies the identity
+		 * from the payload into the session. must be adapted for the
+		 * RSAPSK case. */
+		//s->session->psk_identity = BUF_strdup((char *)p);
+		// CHECKME CD: is this correctly adapted? CD
+		s->session->psk_identity = BUF_strdup(tmp_id);
+		OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN+1);
+		if (s->session->psk_identity == NULL)
+			{
+			SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+				ERR_R_MALLOC_FAILURE);
+			goto rsapsk_err;
+			}
+
+		if (s->session->psk_identity_hint != NULL)
+			OPENSSL_free(s->session->psk_identity_hint);
+		s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+		if (s->ctx->psk_identity_hint != NULL &&
+			s->session->psk_identity_hint == NULL)
+			{
+			SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+				ERR_R_MALLOC_FAILURE);
+			goto rsapsk_err;
+			}
+
+		s->session->master_key_length=
+			s->method->ssl3_enc->generate_master_secret(s,
+				s->session->master_key, psk_or_pre_ms, pre_ms_len);
+		psk_err = 0;
 		//FIXME OPENSSL_cleanse(p,i); // this came from the plain RSA case and cleans the 48 bytes decrypted premaster secret
-        OPENSSL_cleanse(orig_p, n); // clear the whole payload area
-    rsapsk_err: // this label has been renamed from psk_err ro rsapsk_err
-        OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
-        if (psk_err != 0)
-            goto f_err;
-        }
-    else
+		OPENSSL_cleanse(orig_p, n); // clear the whole payload area
+	rsapsk_err: // this label has been renamed from psk_err ro rsapsk_err
+		OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
+		if (psk_err != 0)
+			goto f_err;
+		}
+	else
 #endif /* !OPENSSL_NO_PSK */
 #endif /* !OPENSSL_NO_RSA */
 		if (alg_k & SSL_kGOST) 
